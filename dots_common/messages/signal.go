package messages

import (
	"fmt"
	"github.com/shopspring/decimal"
)

type PortRange struct {
	_struct   bool `codec:",uint"` //encode struct with "unsigned integer" keys
	LowerPort *int `json:"lower-port" codec:"8,omitempty"`
	UpperPort *int `json:"upper-port" codec:"9,omitempty"`
}

type ICMPTypeRange struct {
	_struct   bool `codec:",uint"` //encode struct with "unsigned integer" keys
	LowerType *int `json:"lower-type" codec:"32771,omitempty"`
	UpperType *int `json:"upper-type" codec:"32772,omitempty"`
}

type ACL struct {
	_struct        bool                  `codec:",uint"` //encode struct with "unsigned integer" keys
	AclName        string                `json:"acl-name" codec:"23,omitempty"`
	ActivationType *ActivationTypeString `json:"activation-type" codec:"52,omitempty"`
}

type MitigationScope struct {
	_struct bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	Scopes  []Scope `json:"scope"             codec:"2"`
	// only used in response
	ClientDomainIdentifier string `json:"cdid" codec:"3,omitempty"`
}

type Scope struct {
	_struct bool `codec:",uint"` //encode struct with "unsigned integer" keys
	// A unique identifier that is randomly generated by a DOTS client to prevent request collisions. (used only server side in BODY)
	ClientIdentifier string `json:"cuid" codec:"4,omitempty"`
	// Identifier for the mitigation request
	MitigationId *int `json:"mid" codec:"5,omitempty"`
	// prefix
	TargetPrefix []string `json:"target-prefix" codec:"6,omitempty"`
	// lower-port upper-port
	TargetPortRange []PortRange `json:"target-port-range" codec:"7,omitempty"`
	// Internet Protocol number
	TargetProtocol []int `json:"target-protocol" codec:"10,omitempty"`
	// FQDN
	FQDN []string `json:"target-fqdn" codec:"11,omitempty"`
	// URI
	URI []string `json:"target-uri" codec:"12,omitempty"`
	// alias name
	AliasName []string `json:"alias-name" codec:"13,omitempty"`
	// source prefix
	SourcePrefix []string `json:"ietf-dots-call-home:source-prefix" codec:"32768,omitempty"`
	// source port range
	SourcePortRange []PortRange `json:"ietf-dots-call-home:source-port-range" codec:"32769,omitempty"`
	// source icmp type range
	SourceICMPTypeRange []ICMPTypeRange `json:"ietf-dots-call-home:source-icmp-type-range" codec:"32770,omitempty"`
	// list of acl
	AclList []ACL `json:"ietf-dots-signal-control:acl-list" codec:"53,omitempty"`
	// lifetime
	Lifetime *int `json:"lifetime" codec:"14,omitempty"`
	// attack-status
	AttackStatus *int `json:"attack-status" codec:"29,omitempty"`
	// If false, mitigation is triggered only if the signal channel is lost. This is an optional attribute.
	TriggerMitigation *bool `json:"trigger-mitigation" codec:"45,omitempty"`
	// telemetry total attack traffic
	TotalAttackTraffic []Traffic `json:"ietf-dots-telemetry:total-attack-traffic" codec:"205,omitempty"`
	// telemetry attack detail
	AttackDetail []TelemetryAttackDetail `json:"ietf-dots-telemetry:attack-detail" codec:"207,omitempty"`
}

type MitigationRequest struct {
	_struct         bool            `codec:",uint"` //encode struct with "unsigned integer" keys
	MitigationScope MitigationScope `json:"ietf-dots-signal-channel:mitigation-scope" codec:"1"`
}

type TelemetryAttackDetail struct {
	_struct           bool                      `codec:",uint"` //encode struct with "unsigned integer" keys
	VendorId          *uint32                   `json:"vendor-id" codec:"202,omitempty"`
	AttackId          *uint32                   `json:"attack-id" codec:"164,omitempty"`
	AttackDescription *string                   `json:"attack-description" codec:"165,omitempty"`
	AttackSeverity    *AttackSeverityString     `json:"attack-severity" codec:"166,omitempty"`
	StartTime         *Uint64String             `json:"start-time" codec:"167,omitempty"`
	EndTime           *Uint64String             `json:"end-time" codec:"168,omitempty"`
	SourceCount       *PercentilePeakAndCurrent `json:"source-count" codec:"169,omitempty"`
	TopTalKer         *TelemetryTopTalker       `json:"top-talker" codec:"170,omitempty"`
}

type TelemetryTopTalker struct {
	_struct bool              `codec:",uint"` //encode struct with "unsigned integer" keys
	Talker  []TelemetryTalker `json:"talker" codec:"184,omitempty"`
}

type TelemetryTalker struct {
	_struct               bool                            `codec:",uint"` //encode struct with "unsigned integer" keys
	SpoofedStatus         *bool                           `json:"spoofed-status" codec:"171,omitempty"`
	SourcePrefix          *string                         `json:"source-prefix" codec:"185,omitempty"`
	SourcePortRange       []PortRange                     `json:"source-port-range" codec:"187,omitempty"`
	SourceIcmpTypeRange   []ICMPTypeRange                 `json:"source-icmp-type-range" codec:"188,omitempty"`
	TotalAttackTraffic    []Traffic                       `json:"total-attack-traffic" codec:"144,omitempty"`
	TotalAttackConnection *TelemetryTotalAttackConnection `json:"total-attack-connection" codec:"157,omitempty"`
}
type TelemetryTotalAttackConnection struct {
	_struct         bool                      `codec:",uint"` //encode struct with "unsigned integer" keys
	ConnectionC     *PercentilePeakAndCurrent `json:"connection-c" codec:"158,omitempty"`
	EmbryonicC      *PercentilePeakAndCurrent `json:"embryonic-c" codec:"159,omitempty"`
	ConnectionPsC   *PercentilePeakAndCurrent `json:"connection-ps-c" codec:"160,omitempty"`
	RequestPsC      *PercentilePeakAndCurrent `json:"request-ps-c" codec:"161,omitempty"`
	PartialRequestC *PercentilePeakAndCurrent `json:"partial-request-c" codec:"172,omitempty"`
}

/*
 * get last client-identifier
 */
func (m *MitigationRequest) EffectiveClientIdentifier() string {
	return m.MitigationScope.Scopes[0].ClientIdentifier
}

/*
 * get last client-domain-identifier
 */
func (m *MitigationRequest) EffectiveClientDomainIdentifier() string {
	return m.MitigationScope.ClientDomainIdentifier
}

/*
 * get last client-domain-identifier
 */
func (m *MitigationRequest) EffectiveMitigationId() *int {
	return m.MitigationScope.Scopes[0].MitigationId
}

/*
 * set client-identifier
 */
func (m *MitigationRequest) UpdateClientIdentifier(cuid string) {
	m.MitigationScope.Scopes[0].ClientIdentifier = cuid
}

/*
 * set client-domain-identifier
 */
func (m *MitigationRequest) UpdateClientDomainIdentifier(cdid string) {
	m.MitigationScope.ClientDomainIdentifier = cdid
}

/*
 * set mitigation-id
 */
func (m *MitigationRequest) UpdateMitigationId(mid *int) {
	m.MitigationScope.Scopes[0].MitigationId = mid
}

/*
 * Convert MitigationRequests to strings
 */
func (m *MitigationRequest) String() (result string) {
	spaces3 := "   "
	spaces6 := spaces3 + spaces3
	spaces9 := spaces6 + spaces3
	result = "\n \"ietf-dots-signal-channel:mitigation-scope\":\n"
	for key, scope := range m.MitigationScope.Scopes {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces3, "scope", key+1)
		if scope.MitigationId != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spaces6, "mid", *scope.MitigationId)
		}
		if scope.TargetPrefix != nil {
			for k, v := range scope.TargetPrefix {
				result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spaces6, "target-prefix", k+1, v)
			}
		}
		if scope.TargetPortRange != nil {
			for k, v := range scope.TargetPortRange {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "target-port-range", k+1)
				if v.LowerPort != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "lower-port", *v.LowerPort)
				}
				if v.UpperPort != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "upper-port", *v.UpperPort)
				}
			}
		}
		if scope.TargetProtocol != nil {
			for k, v := range scope.TargetProtocol {
				result += fmt.Sprintf("%s\"%s[%d]\": %d\n", spaces6, "target-protocol", k+1, v)
			}
		}
		if scope.FQDN != nil {
			for k, v := range scope.FQDN {
				result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spaces6, "target-fqdn", k+1, v)
			}
		}
		if scope.URI != nil {
			for k, v := range scope.URI {
				result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spaces6, "target-uri", k+1, v)
			}
		}
		if scope.AliasName != nil {
			for k, v := range scope.AliasName {
				result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spaces6, "alias-name", k+1, v)
			}
		}
		if scope.SourcePrefix != nil {
			for k, v := range scope.SourcePrefix {
				result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spaces6, "ietf-dots-call-home:source-prefix", k+1, v)
			}
		}
		if scope.SourcePortRange != nil {
			for k, v := range scope.SourcePortRange {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "ietf-dots-call-home:source-port-range", k+1)
				if v.LowerPort != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "lower-port", *v.LowerPort)
				}
				if v.UpperPort != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "upper-port", *v.UpperPort)
				}
			}
		}
		if scope.SourceICMPTypeRange != nil {
			for k, v := range scope.SourceICMPTypeRange {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "ietf-dots-call-home:source-icmp-type-range", k+1)
				if v.LowerType != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "lower-type", *v.LowerType)
				}
				if v.UpperType != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "upper-type", *v.UpperType)
				}
			}
		}
		if scope.AclList != nil {
			for k, v := range scope.AclList {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "ietf-dots-signal-control:acl-list", k+1)
				result += fmt.Sprintf("%s\"%s\": %s\n", spaces9, "acl-name", v.AclName)
				if v.ActivationType != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "activation-type", *v.ActivationType)
				}
			}
		}
		if scope.Lifetime != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spaces6, "lifetime", *scope.Lifetime)
		}
		if scope.AttackStatus != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spaces6, "attack-status", *scope.AttackStatus)
		}
		if scope.TriggerMitigation != nil {
			result += fmt.Sprintf("%s\"%s\": %t\n", spaces6, "trigger-mitigation", *scope.TriggerMitigation)
		}
		for k, v := range scope.TotalAttackTraffic {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "ietf-dots-telemetry:total-attack-traffic", k+1)
			result += v.String(spaces6)
		}
		for k, v := range scope.AttackDetail {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "ietf-dots-telemetry:attack-detail", k+1)
			result += v.String(spaces6)
		}
	}
	return
}

type SignalConfigRequest struct {
	_struct       bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	SignalConfigs SignalConfigs `json:"ietf-dots-signal-channel:signal-config" codec:"30"`
}

type SignalConfigs struct {
	_struct          bool         `codec:",uint"` //encode struct with "unsigned integer" keys
	MitigatingConfig SignalConfig `json:"mitigating-config" codec:"32,omitempty"`
	IdleConfig       SignalConfig `json:"idle-config"       codec:"44,omitempty"`
}

type IntCurrent struct {
	_struct      bool `codec:",uint"` //encode struct with "unsigned integer" keys
	CurrentValue *int `json:"current-value" codec:"36,omitempty"`
}

type DecimalCurrent struct {
	_struct      bool             `codec:",uint"` //encode struct with "unsigned integer" keys
	CurrentValue *decimal.Decimal `json:"current-value-decimal" codec:"43,omitempty"`
}

type SignalConfig struct {
	_struct bool `codec:",uint"` //encode struct with "unsigned integer" keys
	// Identifier for the DOTS signal channel session configuration data represented as an integer.
	// This identifier MUST be generated by the DOTS client.  This document does not make any assumption about how this
	// identifier is generated. This is a mandatory attribute.
	SessionId int `json:"sid" codec:"31,omitempty"`
	// Heartbeat interval to check the DOTS peer health.  This is an optional attribute.
	HeartbeatInterval IntCurrent `json:"heartbeat-interval" codec:"33,omitempty"`
	// Maximum number of missing heartbeat response allowed. This is an optional attribute.
	MissingHbAllowed IntCurrent `json:"missing-hb-allowed" codec:"37,omitempty"`
	// Maximum number of retransmissions for a message (referred to as MAX_RETRANSMIT parameter in CoAP).
	// This is an optional attribute.
	MaxRetransmit IntCurrent `json:"max-retransmit" codec:"38,omitempty"`
	// Timeout value in seconds used to calculate the initial retransmission timeout value (referred to as ACK_TIMEOUT
	// parameter in CoAP). This is an optional attribute.
	AckTimeout DecimalCurrent `json:"ack-timeout" codec:"39,omitempty"`
	// Random factor used to influence the timing of retransmissions (referred to as ACK_RANDOM_FACTOR parameter in
	// CoAP).  This is an optional attribute.
	AckRandomFactor DecimalCurrent `json:"ack-random-factor" codec:"40,omitempty"`
	// The parameters in draft-ietf-dots-robust-blocks
	MaxPayload        IntCurrent     `json:"ietf-dots-robust-trans:max-payloads" codec:"32776,omitempty"`
	NonMaxRetransmit  IntCurrent     `json:"ietf-dots-robust-trans:non-max-retransmit" codec:"32777,omitempty"`
	NonTimeout        DecimalCurrent `json:"ietf-dots-robust-trans:non-timeout" codec:"32778,omitempty"`
	NonReceiveTimeout DecimalCurrent `json:"ietf-dots-robust-trans:non-receive-timeout" codec:"32779,omitempty"`
	NonProbingWait    DecimalCurrent `json:"ietf-dots-robust-trans:non-probing-wait" codec:"32780,omitempty"`
	NonPartialWait    DecimalCurrent `json:"ietf-dots-robust-trans:non-partial-wait" codec:"32781,omitempty"`
}

type SignalChannelRequest struct {
	_struct bool `codec:",uint"` //encode struct with "unsigned integer" keys
}

/*
 * Convert SignalConfigRequest to strings
 */
func (m *SignalConfigRequest) String() (result string) {
	var current_float float64
	space3 := "   "
	space6 := space3 + space3
	space9 := space6 + space3
	result = "\n \"ietf-dots-signal-channel:signal-config\":\n"
	result += fmt.Sprintf("%s\"%s\":\n", space3, "mitigating-config")
	result += fmt.Sprintf("%s\"%s\":\n", space6, "heartbeat-interval")
	if m.SignalConfigs.MitigatingConfig.HeartbeatInterval.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.MitigatingConfig.HeartbeatInterval.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "missing-hb-allowed")
	if m.SignalConfigs.MitigatingConfig.MissingHbAllowed.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.MitigatingConfig.MissingHbAllowed.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "max-retransmit")
	if m.SignalConfigs.MitigatingConfig.MaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.MitigatingConfig.MaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ack-timeout")
	if m.SignalConfigs.MitigatingConfig.AckTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.AckTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ack-random-factor")
	if m.SignalConfigs.MitigatingConfig.AckRandomFactor.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.AckRandomFactor.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:max-payloads")
	if m.SignalConfigs.MitigatingConfig.MaxPayload.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.MitigatingConfig.MaxPayload.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-max-retransmit")
	if m.SignalConfigs.MitigatingConfig.NonMaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.MitigatingConfig.NonMaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-timeout")
	if m.SignalConfigs.MitigatingConfig.NonTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.NonTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-receive-timeout")
	if m.SignalConfigs.MitigatingConfig.NonReceiveTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.NonReceiveTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-probing-wait")
	if m.SignalConfigs.MitigatingConfig.NonProbingWait.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.NonProbingWait.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-partial-wait")
	if m.SignalConfigs.MitigatingConfig.NonPartialWait.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.NonPartialWait.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}

	result += fmt.Sprintf("%s\"%s\":\n", space3, "idle-config")
	result += fmt.Sprintf("%s\"%s\":\n", space6, "heartbeat-interval")
	if m.SignalConfigs.IdleConfig.HeartbeatInterval.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.IdleConfig.HeartbeatInterval.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "missing-hb-allowed")
	if m.SignalConfigs.IdleConfig.MissingHbAllowed.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.IdleConfig.MissingHbAllowed.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "max-retransmit")
	if m.SignalConfigs.IdleConfig.MaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.IdleConfig.MaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ack-timeout")
	if m.SignalConfigs.IdleConfig.AckTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.AckTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ack-random-factor")
	if m.SignalConfigs.IdleConfig.AckRandomFactor.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.AckRandomFactor.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}

	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:max-payloads")
	if m.SignalConfigs.IdleConfig.MaxPayload.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.IdleConfig.MaxPayload.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-max-retransmit")
	if m.SignalConfigs.IdleConfig.NonMaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", space9, "current-value", *m.SignalConfigs.IdleConfig.NonMaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-timeout")
	if m.SignalConfigs.IdleConfig.NonTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.NonTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-receive-timeout")
	if m.SignalConfigs.IdleConfig.NonReceiveTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.NonReceiveTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-probing-wait")
	if m.SignalConfigs.IdleConfig.NonProbingWait.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.NonProbingWait.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("%s\"%s\":\n", space6, "ietf-dots-robust-trans:non-partial-wait")
	if m.SignalConfigs.IdleConfig.NonPartialWait.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.NonPartialWait.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("%s\"%s\": %f\n", space9, "current-value-decimal", current_float)
	}
	return
}

type HeartBeatRequest struct {
	_struct   bool      `codec:",uint"` //encode struct with "unsigned integer" keys
	HeartBeat HeartBeat `json:"ietf-dots-signal-channel:heartbeat" codec:"49,omitempty"`
}

type HeartBeat struct {
	_struct      bool  `codec:",uint"` //encode struct with "unsigned integer" keys
	PeerHbStatus *bool `json:"peer-hb-status" codec:"51,omitempty"`
}

/*
 * Convert SignalConfigRequest to strings
 */
func (hb *HeartBeatRequest) String() (result string) {
	result = "\n \"ietf-dots-signal-channel:heartbeat\":\n"
	if hb.HeartBeat.PeerHbStatus != nil {
		result += fmt.Sprintf("       \"%s\": %t\n", "peer-hb-status", *hb.HeartBeat.PeerHbStatus)
	}
	return
}

type TelemetrySetupRequest struct {
	_struct        bool           `codec:",uint"` //encode struct with "unsigned integer" keys
	TelemetrySetup TelemetrySetup `json:"ietf-dots-telemetry:telemetry-setup" codec:"203,omitempty"`
}

type TelemetrySetup struct {
	_struct   bool        `codec:",uint"` //encode struct with "unsigned integer" keys
	Telemetry []Telemetry `json:"telemetry" codec:"129,omitempty"`
}

type Telemetry struct {
	_struct                       bool                           `codec:",uint"` //encode struct with "unsigned integer" keys
	TelemetryConfigurationCurrent *TelemetryConfigurationCurrent `json:"current-config" codec:"175,omitempty"`
	TotalPipeCapacity             []TotalPipeCapacity            `json:"total-pipe-capacity" codec:"136,omitempty"`
	Baseline                      []Baseline                     `json:"baseline" codec:"174,omitempty"`
}
type TelemetryConfigurationCurrent struct {
	_struct                   bool             `codec:",uint"` //encode struct with "unsigned integer" keys
	MeasurementInterval       *IntervalString  `json:"measurement-interval" codec:"182,omitempty"`
	MeasurementSample         *SampleString    `json:"measurement-sample" codec:"183,omitempty"`
	LowPercentile             *decimal.Decimal `json:"low-percentile" codec:"130,omitempty"`
	MidPercentile             *decimal.Decimal `json:"mid-percentile" codec:"131,omitempty"`
	HighPercentile            *decimal.Decimal `json:"high-percentile" codec:"132,omitempty"`
	UnitConfigList            []UnitConfig     `json:"unit-config" codec:"133,omitempty"`
	ServerOriginatedTelemetry *bool            `json:"server-originated-telemetry" codec:"179,omitempty"`
	TelemetryNotifyInterval   *int             `json:"telemetry-notify-interval" codec:"180,omitempty"`
}

type UnitConfig struct {
	_struct    bool        `codec:",uint"` //encode struct with "unsigned integer" keys
	Unit       *UnitString `json:"unit" codec:"134,omitempty"`
	UnitStatus *bool       `json:"unit-status" codec:"135,omitempty"`
}

type TotalPipeCapacity struct {
	_struct  bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	LinkId   *string       `json:"link-id" codec:"137,omitempty"`
	Capacity *Uint64String `json:"capacity" codec:"190,omitempty"`
	Unit     *UnitString   `json:"unit" codec:"134,omitempty"`
}

type Baseline struct {
	_struct                        bool                             `codec:",uint"` //encode struct with "unsigned integer" keys
	Id                             *int                             `json:"id" codec:"163,omitempty"`
	TargetPrefix                   []string                         `json:"target-prefix" codec:"6,omitempty"`
	TargetPortRange                []PortRange                      `json:"target-port-range" codec:"7,omitempty"`
	TargetProtocol                 []int                            `json:"target-protocol" codec:"10,omitempty"`
	TargetFQDN                     []string                         `json:"target-fqdn" codec:"11,omitempty"`
	TargetURI                      []string                         `json:"target-uri" codec:"12,omitempty"`
	AliasName                      []string                         `json:"alias-name" codec:"13,omitempty"`
	TotalTrafficNormal             []Traffic                        `json:"total-traffic-normal" codec:"139,omitempty"`
	TotalTrafficNormalPerProtocol  []TrafficPerProtocol             `json:"total-traffic-normal-per-protocol" codec:"192,omitempty"`
	TotalTrafficNormalPerPort      []TrafficPerPort                 `json:"total-traffic-normal-per-port" codec:"193,omitempty"`
	TotalConnectionCapacity        []TotalConnectionCapacity        `json:"total-connection-capacity" codec:"146,omitempty"`
	TotalConnectionCapacityPerPort []TotalConnectionCapacityPerPort `json:"total-connection-capacity-per-port" codec:"194,omitempty"`
}

type Traffic struct {
	_struct         bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	Unit            *UnitString   `json:"unit" codec:"134,omitempty"`
	LowPercentileG  *Uint64String `json:"low-percentile-g" codec:"140,omitempty"`
	MidPercentileG  *Uint64String `json:"mid-percentile-g" codec:"141,omitempty"`
	HighPercentileG *Uint64String `json:"high-percentile-g" codec:"142,omitempty"`
	PeakG           *Uint64String `json:"peak-g" codec:"143,omitempty"`
	CurrentG        *Uint64String `json:"current-g" codec:"209,omitempty"`
}

type TrafficPerProtocol struct {
	_struct         bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	Unit            *UnitString   `json:"unit" codec:"134,omitempty"`
	Protocol        *uint8        `json:"protocol" codec:"191,omitempty"`
	LowPercentileG  *Uint64String `json:"low-percentile-g" codec:"140,omitempty"`
	MidPercentileG  *Uint64String `json:"mid-percentile-g" codec:"141,omitempty"`
	HighPercentileG *Uint64String `json:"high-percentile-g" codec:"142,omitempty"`
	PeakG           *Uint64String `json:"peak-g" codec:"143,omitempty"`
	CurrentG        *Uint64String `json:"current-g" codec:"209,omitempty"`
}

type TrafficPerPort struct {
	_struct         bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	Unit            *UnitString   `json:"unit" codec:"134,omitempty"`
	Port            *int          `json:"port" codec:"200,omitempty"`
	LowPercentileG  *Uint64String `json:"low-percentile-g" codec:"140,omitempty"`
	MidPercentileG  *Uint64String `json:"mid-percentile-g" codec:"141,omitempty"`
	HighPercentileG *Uint64String `json:"high-percentile-g" codec:"142,omitempty"`
	PeakG           *Uint64String `json:"peak-g" codec:"143,omitempty"`
	CurrentG        *Uint64String `json:"current-g" codec:"209,omitempty"`
}
type TotalConnectionCapacity struct {
	_struct                 bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	Protocol                *uint8        `json:"protocol" codec:"191,omitempty"`
	Connection              *Uint64String `json:"connection" codec:"147,omitempty"`
	ConnectionClient        *Uint64String `json:"connection-client" codec:"148,omitempty"`
	Embryonic               *Uint64String `json:"embryonic" codec:"149,omitempty"`
	EmbryonicClient         *Uint64String `json:"embryonic-client" codec:"150,omitempty"`
	ConnectionPs            *Uint64String `json:"connection-ps" codec:"151,omitempty"`
	ConnectionClientPs      *Uint64String `json:"connection-client-ps" codec:"152,omitempty"`
	RequestPs               *Uint64String `json:"request-ps" codec:"153,omitempty"`
	RequestClientPs         *Uint64String `json:"request-client-ps" codec:"154,omitempty"`
	PartialRequestMax       *Uint64String `json:"partial-request-max" codec:"155,omitempty"`
	PartialRequestClientMax *Uint64String `json:"partial-request-client-max" codec:"156,omitempty"`
}

type TotalConnectionCapacityPerPort struct {
	_struct                 bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	Protocol                *uint8        `json:"protocol" codec:"191,omitempty"`
	Port                    *int          `json:"port" codec:"200,omitempty"`
	Connection              *Uint64String `json:"connection" codec:"147,omitempty"`
	ConnectionClient        *Uint64String `json:"connection-client" codec:"148,omitempty"`
	Embryonic               *Uint64String `json:"embryonic" codec:"149,omitempty"`
	EmbryonicClient         *Uint64String `json:"embryonic-client" codec:"150,omitempty"`
	ConnectionPs            *Uint64String `json:"connection-ps" codec:"151,omitempty"`
	ConnectionClientPs      *Uint64String `json:"connection-client-ps" codec:"152,omitempty"`
	RequestPs               *Uint64String `json:"request-ps" codec:"153,omitempty"`
	RequestClientPs         *Uint64String `json:"request-client-ps" codec:"154,omitempty"`
	PartialRequestMax       *Uint64String `json:"partial-request-max" codec:"155,omitempty"`
	PartialRequestClientMax *Uint64String `json:"partial-request-client-max" codec:"156,omitempty"`
}

/*
 * Convert TelemetrySetupConfigurationRequest to strings
 */
func (ts *TelemetrySetupRequest) String() (result string) {
	spaces3 := "   "
	spaces6 := spaces3 + spaces3
	spaces9 := spaces6 + spaces3
	spaces12 := spaces9 + spaces3
	result = "\n \"ietf-dots-telemetry:telemetry-setup\":\n"
	for key, t := range ts.TelemetrySetup.Telemetry {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces3, "telemetry", key+1)
		if t.TelemetryConfigurationCurrent != nil {
			result += fmt.Sprintf("%s\"%s\":\n", spaces6, "current-config")
			tConfig := t.TelemetryConfigurationCurrent
			if tConfig.MeasurementInterval != nil {
				result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "measurement-interval", *tConfig.MeasurementInterval)
			}
			if tConfig.MeasurementSample != nil {
				result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "measurement-sample", *tConfig.MeasurementSample)
			}
			if tConfig.LowPercentile != nil {
				low, _ := tConfig.LowPercentile.Round(2).Float64()
				result += fmt.Sprintf("%s\"%s\": %f\n", spaces9, "low-percentile", low)
			}
			if tConfig.MidPercentile != nil {
				mid, _ := tConfig.MidPercentile.Round(2).Float64()
				result += fmt.Sprintf("%s\"%s\": %f\n", spaces9, "mid-percentile", mid)
			}
			if tConfig.HighPercentile != nil {
				high, _ := tConfig.HighPercentile.Round(2).Float64()
				result += fmt.Sprintf("%s\"%s\": %f\n", spaces9, "high-percentile", high)
			}
			for k, v := range tConfig.UnitConfigList {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces9, "unit-config", k+1)
				if v.Unit != nil {
					result += fmt.Sprintf("%s\"%s\": %d\n", spaces12, "unit", *v.Unit)
				}
				if v.UnitStatus != nil {
					result += fmt.Sprintf("%s\"%s\": %t\n", spaces12, "unit-status", *v.UnitStatus)
				}
			}
			if tConfig.ServerOriginatedTelemetry != nil {
				result += fmt.Sprintf("%s\"%s\": %t\n", spaces9, "server-originated-telemetry", *tConfig.ServerOriginatedTelemetry)
			}
			if tConfig.TelemetryNotifyInterval != nil {
				result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "telemetry-notify-interval", *tConfig.TelemetryNotifyInterval)
			}
		}
		for k, v := range t.TotalPipeCapacity {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-pipe-capacity", k+1)
			if v.LinkId != nil {
				result += fmt.Sprintf("%s\"%s\": %s\n", spaces9, "link-id", *v.LinkId)
			}
			if v.Capacity != nil {
				result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "capacity", *v.Capacity)
			}
			if v.Unit != nil {
				result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "unit", *v.Unit)
			}
		}
		for k, v := range t.Baseline {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "baseline", k+1)
			if v.Id != nil {
				result += fmt.Sprintf("%s\"%s\": %d\n", spaces9, "id", *v.Id)
			}
			resultTargets := ConvertTargetsRequestToStrings(v.TargetPrefix, v.TargetPortRange, v.TargetProtocol, v.TargetFQDN, v.TargetURI, v.AliasName, spaces9)
			result += resultTargets
			for kNormal, vNormal := range v.TotalTrafficNormal {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces9, "total-traffic-normal", kNormal+1)
				result += vNormal.String(spaces9)
			}
			for kNormalPerProtocol, vNormalPerProtocol := range v.TotalTrafficNormalPerProtocol {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces9, "total-traffic-normal-per-protocol", kNormalPerProtocol+1)
				result += vNormalPerProtocol.String(spaces9)
			}
			for kNormalPerPort, vNormalPerPort := range v.TotalTrafficNormalPerPort {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces9, "total-traffic-normal-per-port", kNormalPerPort+1)
				result += vNormalPerPort.String(spaces9)
			}
			for kConnectionCapacity, vConnectionCapacity := range v.TotalConnectionCapacity {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces9, "total-connection-capacity", kConnectionCapacity+1)
				result += vConnectionCapacity.String(spaces9)
			}
			for kConnectionCapacityPerPort, vConnectionCapacityPerPort := range v.TotalConnectionCapacityPerPort {
				result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces9, "total-connection-capacity-per-port", kConnectionCapacityPerPort+1)
				result += vConnectionCapacityPerPort.String(spaces9)
			}
		}
	}
	return
}

// Convert TagetsRequest to string
func ConvertTargetsRequestToStrings(prefixs []string, portRanges []PortRange, protocols []int, fqdns []string, uris []string, aliases []string, spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	for k, v := range prefixs {
		result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spacesn, "target-prefix", k+1, v)
	}
	for k, v := range portRanges {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn, "target-port-range", k+1)
		if v.LowerPort != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "lower-port", *v.LowerPort)
		}
		if v.UpperPort != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "upper-port", *v.UpperPort)
		}
	}
	for k, v := range protocols {
		result += fmt.Sprintf("%s\"%s[%d]\": %d\n", spacesn, "target-protocol", k+1, v)
	}
	for k, v := range fqdns {
		result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spacesn, "target-fqdn", k+1, v)
	}
	for k, v := range uris {
		result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spacesn, "target-uri", k+1, v)
	}
	for k, v := range aliases {
		result += fmt.Sprintf("%s\"%s[%d]\": %s\n", spacesn, "alias-name", k+1, v)
	}
	return
}

// Convert Traffic to string
func (traffic Traffic) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if traffic.Unit != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "unit", *traffic.Unit)
	}
	if traffic.LowPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "low-percentile-g", *traffic.LowPercentileG)
	}
	if traffic.MidPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "mid-percentile-g", *traffic.MidPercentileG)
	}
	if traffic.HighPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "high-percentile-g", *traffic.HighPercentileG)
	}
	if traffic.PeakG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "peak-g", *traffic.PeakG)
	}
	if traffic.CurrentG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "current-g", *traffic.CurrentG)
	}
	return
}

// Convert TrafficPerProtocol to string
func (traffic TrafficPerProtocol) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if traffic.Unit != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "unit", *traffic.Unit)
	}
	if traffic.Protocol != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "protocol", *traffic.Protocol)
	}
	if traffic.LowPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "low-percentile-g", *traffic.LowPercentileG)
	}
	if traffic.MidPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "mid-percentile-g", *traffic.MidPercentileG)
	}
	if traffic.HighPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "high-percentile-g", *traffic.HighPercentileG)
	}
	if traffic.PeakG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "peak-g", *traffic.PeakG)
	}
	if traffic.CurrentG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "current-g", *traffic.CurrentG)
	}
	return
}

// Convert TrafficPerPort to string
func (traffic TrafficPerPort) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if traffic.Unit != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "unit", *traffic.Unit)
	}
	if traffic.Port != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "port", *traffic.Port)
	}
	if traffic.LowPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "low-percentile-g", *traffic.LowPercentileG)
	}
	if traffic.MidPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "mid-percentile-g", *traffic.MidPercentileG)
	}
	if traffic.HighPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "high-percentile-g", *traffic.HighPercentileG)
	}
	if traffic.PeakG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "peak-g", *traffic.PeakG)
	}
	if traffic.CurrentG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "current-g", *traffic.CurrentG)
	}
	return
}

// Convert TotalConnectionCapacity to string
func (tcc TotalConnectionCapacity) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if tcc.Protocol != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "protocol", *tcc.Protocol)
	}
	if tcc.Connection != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection", *tcc.Connection)
	}
	if tcc.ConnectionClient != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection-client", *tcc.ConnectionClient)
	}
	if tcc.Embryonic != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "embryonic", *tcc.Embryonic)
	}
	if tcc.EmbryonicClient != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "embryonic-client", *tcc.EmbryonicClient)
	}
	if tcc.ConnectionPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection-ps", *tcc.ConnectionPs)
	}
	if tcc.ConnectionClientPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection-client-ps", *tcc.ConnectionClientPs)
	}
	if tcc.RequestPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "request-ps", *tcc.RequestPs)
	}
	if tcc.RequestClientPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "request-client-ps", *tcc.RequestClientPs)
	}
	if tcc.PartialRequestMax != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "partial-request-max", *tcc.PartialRequestMax)
	}
	if tcc.PartialRequestClientMax != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "partial-request-client-max", *tcc.PartialRequestClientMax)
	}
	return
}

// Convert TotalConnectionCapacityPerPort to string
func (tcc TotalConnectionCapacityPerPort) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if tcc.Protocol != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "protocol", *tcc.Protocol)
	}
	if tcc.Port != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "port", *tcc.Port)
	}
	if tcc.Connection != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection", *tcc.Connection)
	}
	if tcc.ConnectionClient != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection-client", *tcc.ConnectionClient)
	}
	if tcc.Embryonic != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "embryonic", *tcc.Embryonic)
	}
	if tcc.EmbryonicClient != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "embryonic-client", *tcc.EmbryonicClient)
	}
	if tcc.ConnectionPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection-ps", *tcc.ConnectionPs)
	}
	if tcc.ConnectionClientPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "connection-client-ps", *tcc.ConnectionClientPs)
	}
	if tcc.RequestPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "request-ps", *tcc.RequestPs)
	}
	if tcc.RequestClientPs != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "request-client-ps", *tcc.RequestClientPs)
	}
	if tcc.PartialRequestMax != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "partial-request-max", *tcc.PartialRequestMax)
	}
	if tcc.PartialRequestClientMax != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "partial-request-client-max", *tcc.PartialRequestClientMax)
	}
	return
}

type TelemetryPreMitigationRequest struct {
	_struct                bool                    `codec:",uint"`                                                //encode struct with "unsigned integer" keys
	TelemetryPreMitigation *TelemetryPreMitigation `json:"ietf-dots-telemetry:telemetry" codec:"208,omitempty"` // CBOR key temp
}

type TelemetryPreMitigation struct {
	_struct                bool                     `codec:",uint"` //encode struct with "unsigned integer" keys
	PreOrOngoingMitigation []PreOrOngoingMitigation `json:"pre-or-ongoing-mitigation" codec:"138,omitempty"`
}

type PreOrOngoingMitigation struct {
	_struct                       bool                            `codec:",uint"` //encode struct with "unsigned integer" keys
	Target                        *Target                         `json:"target" codec:"189,omitempty"`
	TotalTraffic                  []Traffic                       `json:"total-traffic" codec:"145,omitempty"`
	TotalTrafficProtocol          []TrafficPerProtocol            `json:"total-traffic-protocol" codec:"195,omitempty"`
	TotalTrafficPort              []TrafficPerPort                `json:"total-traffic-port" codec:"196,omitempty"`
	TotalAttackTraffic            []Traffic                       `json:"total-attack-traffic" codec:"144,omitempty"`
	TotalAttackTrafficProtocol    []TrafficPerProtocol            `json:"total-attack-traffic-protocol" codec:"197,omitempty"`
	TotalAttackTrafficPort        []TrafficPerPort                `json:"total-attack-traffic-port" codec:"198,omitempty"`
	TotalAttackConnectionProtocol []TotalAttackConnectionProtocol `json:"total-attack-connection-protocol" codec:"173,omitempty"`
	TotalAttackConnectionPort     []TotalAttackConnectionPort     `json:"total-attack-connection-port" codec:"199,omitempty"`
	AttackDetail                  []AttackDetail                  `json:"attack-detail" codec:"162,omitempty"`
}

type Target struct {
	_struct         bool        `codec:",uint"` //encode struct with "unsigned integer" keys
	TargetPrefix    []string    `json:"target-prefix" codec:"6,omitempty"`
	TargetPortRange []PortRange `json:"target-port-range" codec:"7,omitempty"`
	TargetProtocol  []int       `json:"target-protocol" codec:"10,omitempty"`
	FQDN            []string    `json:"target-fqdn" codec:"11,omitempty"`
	URI             []string    `json:"target-uri" codec:"12,omitempty"`
	AliasName       []string    `json:"alias-name" codec:"13,omitempty"`
}

type TotalAttackConnectionProtocol struct {
	_struct          bool                     `codec:",uint"` //encode struct with "unsigned integer" keys
	Protocol        *uint8                    `json:"protocol" codec:"191,omitempty"`
	ConnectionC     *PercentilePeakAndCurrent `json:"connection-c" codec:"158,omitempty"`
	EmbryonicC      *PercentilePeakAndCurrent `json:"embryonic-c" codec:"159,omitempty"`
	ConnectionPsC   *PercentilePeakAndCurrent `json:"connection-ps-c" codec:"160,omitempty"`
	RequestPsC      *PercentilePeakAndCurrent `json:"request-ps-c" codec:"161,omitempty"`
	PartialRequestC *PercentilePeakAndCurrent `json:"partial-request-c" codec:"172,omitempty"`
}

type TotalAttackConnectionPort struct {
	_struct         bool                     `codec:",uint"` //encode struct with "unsigned integer" keys
	Protocol        *uint8                   `json:"protocol" codec:"191,omitempty"`
	Port            *int                     `json:"port" codec:"200,omitempty"`
	ConnectionC     *PercentilePeakAndCurrent `json:"connection-c" codec:"158,omitempty"`
	EmbryonicC      *PercentilePeakAndCurrent `json:"embryonic-c" codec:"159,omitempty"`
	ConnectionPsC   *PercentilePeakAndCurrent `json:"connection-ps-c" codec:"160,omitempty"`
	RequestPsC      *PercentilePeakAndCurrent `json:"request-ps-c" codec:"161,omitempty"`
	PartialRequestC *PercentilePeakAndCurrent `json:"partial-request-c" codec:"172,omitempty"`
}

type AttackDetail struct {
	_struct           bool                      `codec:",uint"` //encode struct with "unsigned integer" keys
	VendorId          *uint32                   `json:"vendor-id" codec:"202,omitempty"`
	AttackId          *uint32                   `json:"attack-id" codec:"164,omitempty"`
	DescriptionLang   *string                   `json:"description-lang" codec:"210,omitempty"`
	AttackDescription *string                   `json:"attack-description" codec:"165,omitempty"`
	AttackSeverity    *AttackSeverityString     `json:"attack-severity" codec:"166,omitempty"`
	StartTime         *Uint64String             `json:"start-time" type:"string" codec:"167,omitempty"`
	EndTime           *Uint64String             `json:"end-time" codec:"168,omitempty"`
	SourceCount       *PercentilePeakAndCurrent `json:"source-count" codec:"169,omitempty"`
	TopTalKer         *TopTalker                `json:"top-talker" codec:"170,omitempty"`
}

type PercentilePeakAndCurrent struct {
	_struct         bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	LowPercentileG  *Uint64String `json:"low-percentile-g" codec:"140,omitempty"`
	MidPercentileG  *Uint64String `json:"mid-percentile-g" codec:"141,omitempty"`
	HighPercentileG *Uint64String `json:"high-percentile-g" codec:"142,omitempty"`
	PeakG           *Uint64String `json:"peak-g" codec:"143,omitempty"`
	CurrentG        *Uint64String `json:"current-g" codec:"209,omitempty"`
}

type TopTalker struct {
	_struct bool     `codec:",uint"` //encode struct with "unsigned integer" keys
	Talker  []Talker `json:"talker" codec:"184,omitempty"`
}

type Talker struct {
	_struct                       bool                            `codec:",uint"` //encode struct with "unsigned integer" keys
	SpoofedStatus                 *bool                           `json:"spoofed-status" codec:"171,omitempty"`
	SourcePrefix                  *string                         `json:"source-prefix" codec:"185,omitempty"`
	SourcePortRange               []PortRange                     `json:"source-port-range" codec:"187,omitempty"`
	SourceIcmpTypeRange           []ICMPTypeRange                 `json:"source-icmp-type-range" codec:"188,omitempty"`
	TotalAttackTraffic            []Traffic                       `json:"total-attack-traffic" codec:"144,omitempty"`
	TotalAttackConnectionProtocol []TotalAttackConnectionProtocol `json:"total-attack-connection-protocol" codec:"173,omitempty"`
}

/*
 * Convert TelemetryPreMitigationRequest to strings
 */
func (tpm *TelemetryPreMitigationRequest) String() (result string) {
	spaces3 := "   "
	spaces6 := spaces3 + spaces3
	spaces9 := spaces6 + spaces3
	result = "\n \"ietf-dots-telemetry:telemetry\":\n"
	for key, t := range tpm.TelemetryPreMitigation.PreOrOngoingMitigation {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces3, "pre-or-ongoing-mitigation", key+1)
		result += fmt.Sprintf("%s\"%s\":\n", spaces6, "target")
		result += ConvertTargetsRequestToStrings(t.Target.TargetPrefix, t.Target.TargetPortRange, t.Target.TargetProtocol, t.Target.FQDN, t.Target.URI, t.Target.AliasName, spaces9)
		for k, v := range t.TotalTraffic {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-traffic", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.TotalTrafficProtocol {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-traffic-protocol", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.TotalTrafficPort {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-traffic-port", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.TotalAttackTraffic {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-attack-traffic", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.TotalAttackTrafficProtocol {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-attack-traffic-protocol", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.TotalAttackTrafficPort {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-attack-traffic-port", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.TotalAttackConnectionProtocol {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-attack-connection-protocol", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.TotalAttackConnectionPort {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "total-attack-connection-port", k+1)
			result += v.String(spaces6)
		}
		for k, v := range t.AttackDetail {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spaces6, "attack-detail", k+1)
			result += v.String(spaces6)
		}
	}
	return
}

// Convert TotalAttackConnectionProtocol to String
func (tac *TotalAttackConnectionProtocol) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if tac.Protocol != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "protocol", *tac.Protocol)
	}
	if tac.ConnectionC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "connection-c")
		result += tac.ConnectionC.String(spacesn3)
	}
	if tac.EmbryonicC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "embryonic-c")
		result += tac.EmbryonicC.String(spacesn3)
	}
	if tac.ConnectionPsC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "connection-ps-c")
		result += tac.ConnectionPsC.String(spacesn3)
	}
	if tac.RequestPsC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "request-ps-c")
		result += tac.RequestPsC.String(spacesn3)
	}
	if tac.PartialRequestC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "partial-request-c")
		result += tac.PartialRequestC.String(spacesn3)
	}
	return
}

// Convert TotalAttackConnectionPort to String
func (tac *TotalAttackConnectionPort) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if tac.Protocol != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "protocol", *tac.Protocol)
	}
	if tac.Port != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "port", *tac.Port)
	}
	if tac.ConnectionC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "connection-c")
		result += tac.ConnectionC.String(spacesn3)
	}
	if tac.EmbryonicC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "embryonic-c")
		result += tac.EmbryonicC.String(spacesn3)
	}
	if tac.ConnectionPsC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "connection-ps-c")
		result += tac.ConnectionPsC.String(spacesn3)
	}
	if tac.RequestPsC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "request-ps-c")
		result += tac.RequestPsC.String(spacesn3)
	}
	if tac.PartialRequestC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "partial-request-c")
		result += tac.PartialRequestC.String(spacesn3)
	}
	return
}

// Convert AttackDetail to String
func (ad AttackDetail) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	spacesn6 := spacesn3 + spaces3
	if ad.VendorId != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "vendor-id", *ad.VendorId)
	}
	if ad.AttackId != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "attack-id", *ad.AttackId)
	}
	if ad.DescriptionLang != nil {
		result += fmt.Sprintf("%s\"%s\": %s\n", spacesn3, "description-lang", *ad.DescriptionLang)
	}
	if ad.AttackDescription != nil {
		result += fmt.Sprintf("%s\"%s\": %s\n", spacesn3, "attack-description", *ad.AttackDescription)
	}
	if ad.AttackSeverity != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "attack-severity", *ad.AttackSeverity)
	}
	if ad.StartTime != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "start-time", *ad.StartTime)
	}
	if ad.EndTime != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "end-time", *ad.EndTime)
	}
	if ad.SourceCount != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "source-count")
		result += ad.SourceCount.String(spacesn3)
	}
	if ad.TopTalKer != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "top-talker")
		for k, v := range ad.TopTalKer.Talker {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn6, "talker", k+1)
			result += v.String(spacesn6)
		}
	}
	return
}

// Convert Talker to String
func (t Talker) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	spacesn6 := spacesn3 + spaces3
	if t.SpoofedStatus != nil {
		result += fmt.Sprintf("%s\"%s\": %t\n", spacesn3, "spoofed-status", *t.SpoofedStatus)
	}
	if t.SourcePrefix != nil {
		result += fmt.Sprintf("%s\"%s\": %s\n", spacesn3, "source-prefix", *t.SourcePrefix)
	}
	for k, v := range t.SourcePortRange {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn3, "source-port-range", k+1)
		if v.LowerPort != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "lower-port", *v.LowerPort)
		}
		if v.UpperPort != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "upper-port", *v.UpperPort)
		}
	}
	for k, v := range t.SourceIcmpTypeRange {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn3, "source-icmp-type-range", k+1)
		if v.LowerType != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "lower-type", *v.LowerType)
		}
		if v.UpperType != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "upper-type", *v.UpperType)
		}
	}
	for k, v := range t.TotalAttackTraffic {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn3, "total-attack-traffic", k+1)
		result += v.String(spacesn3)
	}
	for k, v := range t.TotalAttackConnectionProtocol {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn3, "total-attack-connection-protocol", k+1)
		result += v.String(spacesn3)
	}
	return
}

// Convert TelemetryAttackDetail to String
func (ad TelemetryAttackDetail) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	spacesn6 := spacesn3 + spaces3
	if ad.VendorId != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "vendor-id", *ad.VendorId)
	}
	if ad.AttackId != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "attack-id", *ad.AttackId)
	}
	if ad.AttackDescription != nil {
		result += fmt.Sprintf("%s\"%s\": %s\n", spacesn3, "attack-description", *ad.AttackDescription)
	}
	if ad.AttackSeverity != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "attack-severity", *ad.AttackSeverity)
	}
	if ad.StartTime != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "start-time", *ad.StartTime)
	}
	if ad.EndTime != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "end-time", *ad.EndTime)
	}
	if ad.SourceCount != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "source-count")
		result += ad.SourceCount.String(spacesn3)
	}
	if ad.TopTalKer != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "top-talker")
		for k, v := range ad.TopTalKer.Talker {
			result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn6, "talker", k+1)
			result += v.String(spacesn6)
		}
	}
	return
}

// Convert PercentilePeakAndCurrent to String
func (sc PercentilePeakAndCurrent) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	if sc.LowPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "low-percentile-g", *sc.LowPercentileG)
	}
	if sc.MidPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "mid-percentile-g", *sc.MidPercentileG)
	}
	if sc.HighPercentileG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "high-percentile-g", *sc.HighPercentileG)
	}
	if sc.PeakG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "peak-g", *sc.PeakG)
	}
	if sc.CurrentG != nil {
		result += fmt.Sprintf("%s\"%s\": %d\n", spacesn3, "current-g", *sc.CurrentG)
	}
	return
}

// Convert TelemetryTalker to String
func (t TelemetryTalker) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	spacesn6 := spacesn3 + spaces3
	if t.SpoofedStatus != nil {
		result += fmt.Sprintf("%s\"%s\": %t\n", spacesn3, "spoofed-status", *t.SpoofedStatus)
	}
	if t.SourcePrefix != nil {
		result += fmt.Sprintf("%s\"%s\": %s\n", spacesn3, "source-prefix", *t.SourcePrefix)
	}
	for k, v := range t.SourcePortRange {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn3, "source-port-range", k+1)
		if v.LowerPort != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "lower-port", *v.LowerPort)
		}
		if v.UpperPort != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "upper-port", *v.UpperPort)
		}
	}
	for k, v := range t.SourceIcmpTypeRange {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn3, "source-icmp-type-range", k+1)
		if v.LowerType != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "lower-type", *v.LowerType)
		}
		if v.UpperType != nil {
			result += fmt.Sprintf("%s\"%s\": %d\n", spacesn6, "upper-type", *v.UpperType)
		}
	}
	for k, v := range t.TotalAttackTraffic {
		result += fmt.Sprintf("%s\"%s[%d]\":\n", spacesn3, "total-attack-traffic", k+1)
		result += v.String(spacesn3)
	}
	if t.TotalAttackConnection != nil {
		result += t.TotalAttackConnection.String(spacesn3)
	}
	return
}

// Convert TelemetryTotalAttackConnection to String
func (tac *TelemetryTotalAttackConnection) String(spacesn string) (result string) {
	spaces3 := "   "
	spacesn3 := spacesn + spaces3
	result += fmt.Sprintf("%s\"%s\":\n", spacesn, "total-attack-connection")
	if tac.ConnectionC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "connection-c")
		result += tac.ConnectionC.String(spacesn3)
	}
	if tac.EmbryonicC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "embryonic-c")
		result += tac.EmbryonicC.String(spacesn3)
	}
	if tac.ConnectionPsC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "connection-ps-c")
		result += tac.ConnectionPsC.String(spacesn3)
	}
	if tac.RequestPsC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "request-ps-c")
		result += tac.RequestPsC.String(spacesn3)
	}
	if tac.PartialRequestC != nil {
		result += fmt.Sprintf("%s\"%s\":\n", spacesn3, "partial-request-c")
		result += tac.PartialRequestC.String(spacesn3)
	}
	return
}