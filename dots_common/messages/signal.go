package messages

import "fmt"
import "github.com/shopspring/decimal"

type PortRange struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	LowerPort *int `json:"lower-port" codec:"8,omitempty"`
	UpperPort *int `json:"upper-port" codec:"9,omitempty"`
}

type SourceICMPTypeRange struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	LowerType *int `json:"lower-type" codec:"32771,omitempty"`
	UpperType *int `json:"upper-type" codec:"32772,omitempty"`
}

type ACL struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	AclName string `json:"acl-name" codec:"23,omitempty"`
	ActivationType *int `json:"activation-type" codec:"49,omitempty"`
}

type MitigationScope struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	Scopes            []Scope  `json:"scope"             codec:"2"`
	// only used in response
	ClientDomainIdentifier string `json:"cdid" codec:"3,omitempty"`
}

type Scope struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	// A unique identifier that is randomly generated by a DOTS client to prevent request collisions. (used only server side in BODY)
	ClientIdentifier string `json:"cuid" codec:"4,omitempty"`
	// Identifier for the mitigation request
	MitigationId *int `json:"mid" codec:"5,omitempty"`
	// prefix
	TargetPrefix []string `json:"target-prefix" codec:"6,omitempty"`
	// lower-port upper-port
	TargetPortRange []PortRange `json:"target-port-range" codec:"7,omitempty"`
	// Internet Protocol number
	TargetProtocol []int `json:"target-protocol" codec:"10,omitempty"`
	// FQDN
	FQDN []string `json:"target-fqdn" codec:"11,omitempty"`
	// URI
	URI []string `json:"target-uri" codec:"12,omitempty"`
	// alias name
	AliasName []string `json:"alias-name" codec:"13,omitempty"`
	// source prefix
	SourcePrefix []string `json:"ietf-dots-call-home:source-prefix" codec:"32768,omitempty"`
	// source port range
	SourcePortRange []PortRange `json:"ietf-dots-call-home:source-port-range" codec:"32769,omitempty"`
	// source icmp type range
	SourceICMPTypeRange []SourceICMPTypeRange `json:"ietf-dots-call-home:source-icmp-type-range" codec:"32770,omitempty"`
	// list of acl
	AclList []ACL `json:"acl-list" codec:"22,omitempty"`
	// lifetime
	Lifetime *int `json:"lifetime" codec:"14,omitempty"`
	// attack-status
	AttackStatus *int `json:"attack-status" codec:"29,omitempty"`
	// If false, mitigation is triggered only if the signal channel is lost. This is an optional attribute.
	TriggerMitigation *bool `json:"trigger-mitigation" codec:"45,omitempty"`
}

type MitigationRequest struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	MitigationScope MitigationScope `json:"ietf-dots-signal-channel:mitigation-scope" codec:"1"`
}

/*
 * get last client-identifier
 */
func (m *MitigationRequest) EffectiveClientIdentifier() string {
	return m.MitigationScope.Scopes[0].ClientIdentifier
}

/*
 * get last client-domain-identifier
 */
func (m *MitigationRequest) EffectiveClientDomainIdentifier() string {
	return m.MitigationScope.ClientDomainIdentifier
}

/*
 * get last client-domain-identifier
 */
 func (m *MitigationRequest) EffectiveMitigationId() *int {
	return m.MitigationScope.Scopes[0].MitigationId
}

/*
 * set client-identifier
 */
func (m *MitigationRequest) UpdateClientIdentifier(cuid string) {
	m.MitigationScope.Scopes[0].ClientIdentifier = cuid
}

/*
 * set client-domain-identifier
 */
func (m *MitigationRequest) UpdateClientDomainIdentifier(cdid string) {
	m.MitigationScope.ClientDomainIdentifier = cdid
}

/*
 * set mitigation-id
 */
func (m *MitigationRequest) UpdateMitigationId(mid *int) {
	m.MitigationScope.Scopes[0].MitigationId = mid
}

/*
 * Convert MitigationRequests to strings
 */
func (m *MitigationRequest) String() (result string) {
	result = "\n \"ietf-dots-signal-channel:mitigation-scope\":\n"
	for key, scope := range m.MitigationScope.Scopes {
		result += fmt.Sprintf("   \"%s[%d]\":\n", "scope", key+1)
		if scope.MitigationId != nil {
			result += fmt.Sprintf("     \"%s\": %d\n", "mid", *scope.MitigationId)
		}
		if scope.TargetPrefix != nil {
			for k, v := range scope.TargetPrefix {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-prefix", k+1, v)
			}
		}
		if scope.TargetPortRange != nil {
			for k, v := range scope.TargetPortRange {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "target-port-range", k+1)
				if v.LowerPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "lower-port", *v.LowerPort)
				}
				if v.UpperPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "upper-port", *v.UpperPort)
				}
			}
		}
		if scope.TargetProtocol != nil {
			for k, v := range scope.TargetProtocol {
				result += fmt.Sprintf("     \"%s[%d]\": %d\n", "target-protocol", k+1, v)
			}
		}
		if scope.FQDN != nil {
			for k, v := range scope.FQDN {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-fqdn", k+1, v)
			}
		}
		if scope.URI != nil {
			for k, v := range scope.URI {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-uri", k+1, v)
			}
		}
		if scope.AliasName != nil {
			for k, v := range scope.AliasName {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "alias-name", k+1, v)
			}
		}
		if scope.SourcePrefix != nil {
			for k, v := range scope.SourcePrefix {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n","ietf-dots-call-home:source-prefix", k+1, v)
			}
		}
		if scope.SourcePortRange != nil {
			for k, v := range scope.SourcePortRange {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "ietf-dots-call-home:source-port-range", k+1)
				if v.LowerPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "lower-port", *v.LowerPort)
				}
				if v.UpperPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "upper-port", *v.UpperPort)
				}
			}
		}
		if scope.SourceICMPTypeRange != nil {
			for k, v := range scope.SourceICMPTypeRange {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "ietf-dots-call-home:source-icmp-type-range", k+1)
				if v.LowerType != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "lower-type", *v.LowerType)
				}
				if v.UpperType != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "upper-type", *v.UpperType)
				}
			}
		}
		if scope.AclList != nil {
			for k, v := range scope.AclList {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "acl-list", k+1)
				result += fmt.Sprintf("       \"%s\": %s\n", "acl-name", v.AclName)
				if v.ActivationType != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "activation-type", *v.ActivationType)
				}
			}
		}
		if scope.Lifetime != nil {
			result += fmt.Sprintf("     \"%s\": %d\n", "lifetime", *scope.Lifetime)
		}
		if scope.AttackStatus != nil {
			result += fmt.Sprintf("     \"%s\": %d\n", "attack-status", *scope.AttackStatus)
		}
		if scope.TriggerMitigation != nil {
			result += fmt.Sprintf("     \"%s\": %t\n", "trigger-mitigation", *scope.TriggerMitigation)
		}
	}
	return
}

type SignalConfigRequest struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	SignalConfigs SignalConfigs `json:"ietf-dots-signal-channel:signal-config" codec:"30"`
}

type SignalConfigs struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	MitigatingConfig SignalConfig `json:"mitigating-config" codec:"32"`
	IdleConfig SignalConfig       `json:"idle-config"       codec:"44"`
}

type IntCurrent struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	CurrentValue *int `json:"current-value" codec:"36,omitempty"`
}

type DecimalCurrent struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	CurrentValue *decimal.Decimal `json:"current-value-decimal" codec:"43,omitempty"`
}

type SignalConfig struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
	// Identifier for the DOTS signal channel session configuration data represented as an integer.
	// This identifier MUST be generated by the DOTS client.  This document does not make any assumption about how this
	// identifier is generated. This is a mandatory attribute.
	SessionId int `json:"sid" codec:"31,omitempty"`
	// Heartbeat interval to check the DOTS peer health.  This is an optional attribute.
	HeartbeatInterval IntCurrent `json:"heartbeat-interval" codec:"33,omitempty"`
	// Maximum number of missing heartbeat response allowed. This is an optional attribute.
	MissingHbAllowed IntCurrent `json:"missing-hb-allowed" codec:"37,omitempty"`
	// Maximum number of retransmissions for a message (referred to as MAX_RETRANSMIT parameter in CoAP).
	// This is an optional attribute.
	MaxRetransmit IntCurrent `json:"max-retransmit" codec:"38,omitempty"`
	// Timeout value in seconds used to calculate the initial retransmission timeout value (referred to as ACK_TIMEOUT
	// parameter in CoAP). This is an optional attribute.
	AckTimeout DecimalCurrent `json:"ack-timeout" codec:"39,omitempty"`
	// Random factor used to influence the timing of retransmissions (referred to as ACK_RANDOM_FACTOR parameter in
	// CoAP).  This is an optional attribute.
	AckRandomFactor DecimalCurrent `json:"ack-random-factor" codec:"40,omitempty"`
}

type SignalChannelRequest struct {
	_struct bool `codec:",uint"`        //encode struct with "unsigned integer" keys
}

/*
 * Convert SignalConfigRequest to strings
 */
func (m *SignalConfigRequest) String() (result string) {
	var current_float float64
	result = "\n \"ietf-dots-signal-channel:signal-config\":\n"
	result += fmt.Sprintf("   \"%s\":\n", "mitigating-config")
	result += fmt.Sprintf("     \"%s\":\n", "heartbeat-interval")
	if m.SignalConfigs.MitigatingConfig.HeartbeatInterval.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.MitigatingConfig.HeartbeatInterval.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "missing-hb-allowed")
	if m.SignalConfigs.MitigatingConfig.MissingHbAllowed.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.MitigatingConfig.MissingHbAllowed.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "max-retransmit")
	if m.SignalConfigs.MitigatingConfig.MaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.MitigatingConfig.MaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-timeout")
	if m.SignalConfigs.MitigatingConfig.AckTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.AckTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-random-factor")
	if m.SignalConfigs.MitigatingConfig.AckRandomFactor.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.AckRandomFactor.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}

	result += fmt.Sprintf("   \"%s\":\n", "idle-config")
	result += fmt.Sprintf("     \"%s\":\n", "heartbeat-interval")
	if m.SignalConfigs.IdleConfig.HeartbeatInterval.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.IdleConfig.HeartbeatInterval.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "missing-hb-allowed")
	if m.SignalConfigs.IdleConfig.MissingHbAllowed.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.IdleConfig.MissingHbAllowed.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "max-retransmit")
	if m.SignalConfigs.IdleConfig.MaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.IdleConfig.MaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-timeout")
	if m.SignalConfigs.IdleConfig.AckTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.AckTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-random-factor")
	if m.SignalConfigs.IdleConfig.AckRandomFactor.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.AckRandomFactor.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}
	return
}