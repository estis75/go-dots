package messages

import "fmt"
import "github.com/shopspring/decimal"

type PortRange struct {
	_struct   bool `codec:",uint"` //encode struct with "unsigned integer" keys
	LowerPort *int `json:"lower-port" codec:"8,omitempty"`
	UpperPort *int `json:"upper-port" codec:"9,omitempty"`
}

type ICMPTypeRange struct {
	_struct   bool `codec:",uint"` //encode struct with "unsigned integer" keys
	LowerType *int `json:"lower-type" codec:"32771,omitempty"`
	UpperType *int `json:"upper-type" codec:"32772,omitempty"`
}

type ACL struct {
	_struct        bool   `codec:",uint"` //encode struct with "unsigned integer" keys
	AclName        string `json:"ietf-dots-signal-control:acl-name" codec:"23,omitempty"`
	ActivationType *int   `json:"ietf-dots-signal-control:activation-type" codec:"49,omitempty"`
}

type MitigationScope struct {
	_struct bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	Scopes  []Scope `json:"scope"             codec:"2"`
	// only used in response
	ClientDomainIdentifier string `json:"cdid" codec:"3,omitempty"`
}

type Scope struct {
	_struct bool `codec:",uint"` //encode struct with "unsigned integer" keys
	// A unique identifier that is randomly generated by a DOTS client to prevent request collisions. (used only server side in BODY)
	ClientIdentifier string `json:"cuid" codec:"4,omitempty"`
	// Identifier for the mitigation request
	MitigationId *int `json:"mid" codec:"5,omitempty"`
	// prefix
	TargetPrefix []string `json:"target-prefix" codec:"6,omitempty"`
	// lower-port upper-port
	TargetPortRange []PortRange `json:"target-port-range" codec:"7,omitempty"`
	// Internet Protocol number
	TargetProtocol []int `json:"target-protocol" codec:"10,omitempty"`
	// FQDN
	FQDN []string `json:"target-fqdn" codec:"11,omitempty"`
	// URI
	URI []string `json:"target-uri" codec:"12,omitempty"`
	// alias name
	AliasName []string `json:"alias-name" codec:"13,omitempty"`
	// source prefix
	SourcePrefix []string `json:"ietf-dots-call-home:source-prefix" codec:"32768,omitempty"`
	// source port range
	SourcePortRange []PortRange `json:"ietf-dots-call-home:source-port-range" codec:"32769,omitempty"`
	// source icmp type range
	SourceICMPTypeRange []ICMPTypeRange `json:"ietf-dots-call-home:source-icmp-type-range" codec:"32770,omitempty"`
	// list of acl
	AclList []ACL `json:"ietf-dots-signal-control:acl-list" codec:"22,omitempty"`
	// lifetime
	Lifetime *int `json:"lifetime" codec:"14,omitempty"`
	// attack-status
	AttackStatus *int `json:"attack-status" codec:"29,omitempty"`
	// If false, mitigation is triggered only if the signal channel is lost. This is an optional attribute.
	TriggerMitigation *bool `json:"trigger-mitigation" codec:"45,omitempty"`
	// telemetry total attack traffic
	TotalAttackTraffic []TelemetryTraffic `json:"ietf-dots-telemetry:total-attack-traffic" codec:"32875,omitempty"`
	// telemetry attack detail
	AttackDetail *TelemetryAttackDetail `json:"ietf-dots-telemetry:attack-detail" codec:"32886,omitempty"`
}

type MitigationRequest struct {
	_struct         bool            `codec:",uint"` //encode struct with "unsigned integer" keys
	MitigationScope MitigationScope `json:"ietf-dots-signal-channel:mitigation-scope" codec:"1"`
}

type TelemetryTraffic struct {
	_struct         bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	Unit            *int    `json:"ietf-dots-telemetry:unit" codec:"32870,omitempty"`
	Protocol        *uint8  `json:"ietf-dots-telemetry:protocol" codec:"32905,omitempty"`
	LowPercentileG  *uint64 `json:"ietf-dots-telemetry:low-percentile-g" codec:"32871,omitempty"`
	MidPercentileG  *uint64 `json:"ietf-dots-telemetry:mid-percentile-g" codec:"32872,omitempty"`
	HighPercentileG *uint64 `json:"ietf-dots-telemetry:high-percentile-g" codec:"32873,omitempty"`
	PeakG           *uint64 `json:"ietf-dots-telemetry:peak-g" codec:"32874,omitempty"`
}

type TelemetryAttackDetail struct {
	_struct        bool                  `codec:",uint"` //encode struct with "unsigned integer" keys
	Id             *uint32               `json:"ietf-dots-telemetry:id" codec:"32887,omitempty"`
	AttackId       *string               `json:"ietf-dots-telemetry:attack-id" codec:"32888,omitempty"`
	AttackName     *string               `json:"ietf-dots-telemetry:attack-name" codec:"32889,omitempty"`
	AttackSeverity *int                  `json:"ietf-dots-telemetry:attack-severity" codec:"32890,omitempty"`
	StartTime      *uint64               `json:"ietf-dots-telemetry:start-time" codec:"32891,omitempty"`
	EndTime        *uint64               `json:"ietf-dots-telemetry:end-time" codec:"32892,omitempty"`
	SourceCount    *TelemetrySourceCount `json:"ietf-dots-telemetry:source-count" codec:"32893,omitempty"`
	TopTalKer      *TelemetryTopTalker   `json:"ietf-dots-telemetry:top-talker" codec:"32894,omitempty"`
}

type TelemetrySourceCount struct{
	_struct         bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	LowPercentileG  *uint64 `json:"ietf-dots-telemetry:low-percentile-g" codec:"32871,omitempty"`
	MidPercentileG  *uint64 `json:"ietf-dots-telemetry:mid-percentile-g" codec:"32872,omitempty"`
	HighPercentileG *uint64 `json:"ietf-dots-telemetry:high-percentile-g" codec:"32873,omitempty"`
	PeakG           *uint64 `json:"ietf-dots-telemetry:peak-g" codec:"32874,omitempty"`
}

type TelemetryTopTalker struct {
	_struct bool              `codec:",uint"` //encode struct with "unsigned integer" keys
	Talker  []TelemetryTalker `json:"ietf-dots-telemetry:talker" codec:"32896,omitempty"`
}

type TelemetryTalker struct {
	_struct               bool                            `codec:",uint"` //encode struct with "unsigned integer" keys
	SpoofedStatus         *bool                           `json:"ietf-dots-telemetry:spoofed-status" codec:"32895,omitempty"`
	SourcePrefix          *string                         `json:"ietf-dots-telemetry:source-prefix" codec:"32897,omitempty"`
	SourcePortRange       []TelemetrySourcePortRange      `json:"ietf-dots-telemetry:source-port-range" codec:"32898,omitempty"`
	SourceIcmpTypeRange   []TelemetrySourceICMPTypeRange  `json:"ietf-dots-telemetry:source-icmp-type-range" codec:"32901,omitempty"`
	TotalAttackTraffic    []TelemetryTraffic              `json:"ietf-dots-telemetry:total-attack-traffic" codec:"32875,omitempty"`
	TotalAttackConnection *TelemetryTotalAttackConnection `json:"ietf-dots-telemetry:total-attack-connection" codec:"32876,omitempty"`
}

type TelemetryTotalAttackConnection struct {
	_struct         bool                           `codec:",uint"` //encode struct with "unsigned integer" keys
	LowPercentileC  *TelemetryConnectionPercentile `json:"ietf-dots-telemetry:low-percentile-c" codec:"32877,omitempty"`
	MidPercentileC  *TelemetryConnectionPercentile `json:"ietf-dots-telemetry:mid-percentile-c" codec:"32878,omitempty"`
	HighPercentileC *TelemetryConnectionPercentile `json:"ietf-dots-telemetry:high-percentile-c" codec:"32879,omitempty"`
	PeakC           *TelemetryConnectionPercentile `json:"ietf-dots-telemetry:peak-c" codec:"32880,omitempty"`
}

type TelemetryConnectionPercentile struct {
	_struct          bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	Connection       *uint64 `json:"ietf-dots-telemetry:connection" codec:"32881,omitempty"`
	Embryonic        *uint64 `json:"ietf-dots-telemetry:embryonic" codec:"32882,omitempty"`
	ConnectionPs     *uint64 `json:"ietf-dots-telemetry:connection-ps" codec:"32883,omitempty"`
	RequestPs        *uint64 `json:"ietf-dots-telemetry:request-ps" codec:"32884,omitempty"`
	PartialRequestPs *uint64 `json:"ietf-dots-telemetry:partial-request-ps" codec:"32885,omitempty"`
}

type TelemetrySourcePortRange struct {
	_struct   bool `codec:",uint"` //encode struct with "unsigned integer" keys
	LowerPort *int `json:"ietf-dots-telemetry:lower-port" codec:"32899,omitempty"`
	UpperPort *int `json:"ietf-dots-telemetry:upper-port" codec:"32900,omitempty"`
}

type TelemetrySourceICMPTypeRange struct {
	_struct   bool `codec:",uint"` //encode struct with "unsigned integer" keys
	LowerType *int `json:"ietf-dots-telemetry:lower-type" codec:"32901,omitempty"`
	UpperType *int `json:"ietf-dots-telemetry:upper-type" codec:"32902,omitempty"`
}

/*
 * get last client-identifier
 */
func (m *MitigationRequest) EffectiveClientIdentifier() string {
	return m.MitigationScope.Scopes[0].ClientIdentifier
}

/*
 * get last client-domain-identifier
 */
func (m *MitigationRequest) EffectiveClientDomainIdentifier() string {
	return m.MitigationScope.ClientDomainIdentifier
}

/*
 * get last client-domain-identifier
 */
func (m *MitigationRequest) EffectiveMitigationId() *int {
	return m.MitigationScope.Scopes[0].MitigationId
}

/*
 * set client-identifier
 */
func (m *MitigationRequest) UpdateClientIdentifier(cuid string) {
	m.MitigationScope.Scopes[0].ClientIdentifier = cuid
}

/*
 * set client-domain-identifier
 */
func (m *MitigationRequest) UpdateClientDomainIdentifier(cdid string) {
	m.MitigationScope.ClientDomainIdentifier = cdid
}

/*
 * set mitigation-id
 */
func (m *MitigationRequest) UpdateMitigationId(mid *int) {
	m.MitigationScope.Scopes[0].MitigationId = mid
}

/*
 * Convert MitigationRequests to strings
 */
func (m *MitigationRequest) String() (result string) {
	result = "\n \"ietf-dots-signal-channel:mitigation-scope\":\n"
	for key, scope := range m.MitigationScope.Scopes {
		result += fmt.Sprintf("   \"%s[%d]\":\n", "scope", key+1)
		if scope.MitigationId != nil {
			result += fmt.Sprintf("     \"%s\": %d\n", "mid", *scope.MitigationId)
		}
		if scope.TargetPrefix != nil {
			for k, v := range scope.TargetPrefix {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-prefix", k+1, v)
			}
		}
		if scope.TargetPortRange != nil {
			for k, v := range scope.TargetPortRange {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "target-port-range", k+1)
				if v.LowerPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "lower-port", *v.LowerPort)
				}
				if v.UpperPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "upper-port", *v.UpperPort)
				}
			}
		}
		if scope.TargetProtocol != nil {
			for k, v := range scope.TargetProtocol {
				result += fmt.Sprintf("     \"%s[%d]\": %d\n", "target-protocol", k+1, v)
			}
		}
		if scope.FQDN != nil {
			for k, v := range scope.FQDN {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-fqdn", k+1, v)
			}
		}
		if scope.URI != nil {
			for k, v := range scope.URI {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-uri", k+1, v)
			}
		}
		if scope.AliasName != nil {
			for k, v := range scope.AliasName {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "alias-name", k+1, v)
			}
		}
		if scope.SourcePrefix != nil {
			for k, v := range scope.SourcePrefix {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "ietf-dots-call-home:source-prefix", k+1, v)
			}
		}
		if scope.SourcePortRange != nil {
			for k, v := range scope.SourcePortRange {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "ietf-dots-call-home:source-port-range", k+1)
				if v.LowerPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "lower-port", *v.LowerPort)
				}
				if v.UpperPort != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "upper-port", *v.UpperPort)
				}
			}
		}
		if scope.SourceICMPTypeRange != nil {
			for k, v := range scope.SourceICMPTypeRange {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "ietf-dots-call-home:source-icmp-type-range", k+1)
				if v.LowerType != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "lower-type", *v.LowerType)
				}
				if v.UpperType != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "upper-type", *v.UpperType)
				}
			}
		}
		if scope.AclList != nil {
			for k, v := range scope.AclList {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "ietf-dots-signal-control:acl-list", k+1)
				result += fmt.Sprintf("       \"%s\": %s\n", "ietf-dots-signal-control:acl-name", v.AclName)
				if v.ActivationType != nil {
					result += fmt.Sprintf("       \"%s\": %d\n", "ietf-dots-signal-control:activation-type", *v.ActivationType)
				}
			}
		}
		if scope.Lifetime != nil {
			result += fmt.Sprintf("     \"%s\": %d\n", "lifetime", *scope.Lifetime)
		}
		if scope.AttackStatus != nil {
			result += fmt.Sprintf("     \"%s\": %d\n", "attack-status", *scope.AttackStatus)
		}
		if scope.TriggerMitigation != nil {
			result += fmt.Sprintf("     \"%s\": %t\n", "trigger-mitigation", *scope.TriggerMitigation)
		}
		if scope.TotalAttackTraffic != nil {
			for k, v := range scope.TotalAttackTraffic {
				result += fmt.Sprintf("      \"%s[%d]\":\n", "ietf-dots-telemetry:total-attack-traffic", k+1)
				result += v.String()
			}
		}
		if scope.AttackDetail != nil {
			result += scope.AttackDetail.String()
		}
	}
	return
}

type SignalConfigRequest struct {
	_struct       bool          `codec:",uint"` //encode struct with "unsigned integer" keys
	SignalConfigs SignalConfigs `json:"ietf-dots-signal-channel:signal-config" codec:"30"`
}

type SignalConfigs struct {
	_struct          bool         `codec:",uint"` //encode struct with "unsigned integer" keys
	MitigatingConfig SignalConfig `json:"mitigating-config" codec:"32"`
	IdleConfig       SignalConfig `json:"idle-config"       codec:"44"`
}

type IntCurrent struct {
	_struct      bool `codec:",uint"` //encode struct with "unsigned integer" keys
	CurrentValue *int `json:"current-value" codec:"36,omitempty"`
}

type DecimalCurrent struct {
	_struct      bool             `codec:",uint"` //encode struct with "unsigned integer" keys
	CurrentValue *decimal.Decimal `json:"current-value-decimal" codec:"43,omitempty"`
}

type SignalConfig struct {
	_struct bool `codec:",uint"` //encode struct with "unsigned integer" keys
	// Identifier for the DOTS signal channel session configuration data represented as an integer.
	// This identifier MUST be generated by the DOTS client.  This document does not make any assumption about how this
	// identifier is generated. This is a mandatory attribute.
	SessionId int `json:"sid" codec:"31,omitempty"`
	// Heartbeat interval to check the DOTS peer health.  This is an optional attribute.
	HeartbeatInterval IntCurrent `json:"heartbeat-interval" codec:"33,omitempty"`
	// Maximum number of missing heartbeat response allowed. This is an optional attribute.
	MissingHbAllowed IntCurrent `json:"missing-hb-allowed" codec:"37,omitempty"`
	// Maximum number of retransmissions for a message (referred to as MAX_RETRANSMIT parameter in CoAP).
	// This is an optional attribute.
	MaxRetransmit IntCurrent `json:"max-retransmit" codec:"38,omitempty"`
	// Timeout value in seconds used to calculate the initial retransmission timeout value (referred to as ACK_TIMEOUT
	// parameter in CoAP). This is an optional attribute.
	AckTimeout DecimalCurrent `json:"ack-timeout" codec:"39,omitempty"`
	// Random factor used to influence the timing of retransmissions (referred to as ACK_RANDOM_FACTOR parameter in
	// CoAP).  This is an optional attribute.
	AckRandomFactor DecimalCurrent `json:"ack-random-factor" codec:"40,omitempty"`
}

type SignalChannelRequest struct {
	_struct bool `codec:",uint"` //encode struct with "unsigned integer" keys
}

/*
 * Convert SignalConfigRequest to strings
 */
func (m *SignalConfigRequest) String() (result string) {
	var current_float float64
	result = "\n \"ietf-dots-signal-channel:signal-config\":\n"
	result += fmt.Sprintf("   \"%s\":\n", "mitigating-config")
	result += fmt.Sprintf("     \"%s\":\n", "heartbeat-interval")
	if m.SignalConfigs.MitigatingConfig.HeartbeatInterval.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.MitigatingConfig.HeartbeatInterval.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "missing-hb-allowed")
	if m.SignalConfigs.MitigatingConfig.MissingHbAllowed.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.MitigatingConfig.MissingHbAllowed.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "max-retransmit")
	if m.SignalConfigs.MitigatingConfig.MaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.MitigatingConfig.MaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-timeout")
	if m.SignalConfigs.MitigatingConfig.AckTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.AckTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-random-factor")
	if m.SignalConfigs.MitigatingConfig.AckRandomFactor.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.MitigatingConfig.AckRandomFactor.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}

	result += fmt.Sprintf("   \"%s\":\n", "idle-config")
	result += fmt.Sprintf("     \"%s\":\n", "heartbeat-interval")
	if m.SignalConfigs.IdleConfig.HeartbeatInterval.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.IdleConfig.HeartbeatInterval.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "missing-hb-allowed")
	if m.SignalConfigs.IdleConfig.MissingHbAllowed.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.IdleConfig.MissingHbAllowed.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "max-retransmit")
	if m.SignalConfigs.IdleConfig.MaxRetransmit.CurrentValue != nil {
		result += fmt.Sprintf("       \"%s\": %d\n", "current-value", *m.SignalConfigs.IdleConfig.MaxRetransmit.CurrentValue)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-timeout")
	if m.SignalConfigs.IdleConfig.AckTimeout.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.AckTimeout.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}
	result += fmt.Sprintf("     \"%s\":\n", "ack-random-factor")
	if m.SignalConfigs.IdleConfig.AckRandomFactor.CurrentValue != nil {
		current_float, _ = m.SignalConfigs.IdleConfig.AckRandomFactor.CurrentValue.Round(2).Float64()
		result += fmt.Sprintf("       \"%s\": %f\n", "current-value-decimal", current_float)
	}
	return
}

type HeartBeatRequest struct {
	_struct   bool      `codec:",uint"` //encode struct with "unsigned integer" keys
	HeartBeat HeartBeat `json:"ietf-dots-signal-channel:heartbeat" codec:"49,omitempty"`
}

type HeartBeat struct {
	_struct      bool  `codec:",uint"` //encode struct with "unsigned integer" keys
	PeerHbStatus *bool `json:"peer-hb-status" codec:"51,omitempty"`
}

/*
 * Convert SignalConfigRequest to strings
 */
func (hb *HeartBeatRequest) String() (result string) {
	result = "\n \"ietf-dots-signal-channel:heartbeat\":\n"
	if hb.HeartBeat.PeerHbStatus != nil {
		result += fmt.Sprintf("       \"%s\": %t\n", "peer-hb-status", *hb.HeartBeat.PeerHbStatus)
	}
	return
}

type TelemetrySetupRequest struct {
	_struct        bool           `codec:",uint"` //encode struct with "unsigned integer" keys
	TelemetrySetup TelemetrySetup `json:"ietf-dots-telemetry:telemetry-setup" codec:"32868,omitempty"`
}

type TelemetrySetup struct {
	_struct   bool        `codec:",uint"`                            //encode struct with "unsigned integer" keys
	Telemetry []Telemetry `json:"telemetry" codec:"32802,omitempty"`
}

type Telemetry struct {
	_struct                       bool                           `codec:",uint"` //encode struct with "unsigned integer" keys
	TelemetryConfigurationCurrent *TelemetryConfigurationCurrent `json:"current-config" codec:"32850,omitempty"`
	TotalPipeCapacity             []TotalPipeCapacity            `json:"total-pipe-capacity" codec:"32809,omitempty"`
	Baseline                      []Baseline                     `json:"baseline" codec:"32849,omitempty"`
}
type TelemetryConfigurationCurrent struct {
	_struct                   bool             `codec:",uint"`                                       //encode struct with "unsigned integer" keys
	MeasurementInterval       *int             `json:"measurement-interval" codec:"32857,omitempty"`
	MeasurementSample         *int             `json:"measurement-sample" codec:"32858,omitempty"`
	LowPercentile             *decimal.Decimal `json:"low-percentile" codec:"32803,omitempty"`
	MidPercentile             *decimal.Decimal `json:"mid-percentile" codec:"32804,omitempty"`
	HighPercentile            *decimal.Decimal `json:"high-percentile" codec:"32805,omitempty"`
	UnitConfigList            []UnitConfig     `json:"unit-config" codec:"32806,omitempty"`
	ServerOriginatedTelemetry *bool            `json:"server-originated-telemetry" codec:"32854,omitempty"`
	TelemetryNotifyInterval   *int             `json:"telemetry-notify-interval" codec:"32855,omitempty"`
}

type UnitConfig struct {
	_struct    bool  `codec:",uint"` //encode struct with "unsigned integer" keys
	Unit       *int  `json:"unit" codec:"32807,omitempty"`
	UnitStatus *bool `json:"unit-status" codec:"32808,omitempty"`
}

type TotalPipeCapacity struct {
	_struct  bool    `codec:",uint"`                           //encode struct with "unsigned integer" keys
	LinkId   *string `json:"link-id" codec:"32810,omitempty"`
	Capacity *int    `json:"capacity" codec:"32867,omitempty"`
	Unit     *int    `json:"unit" codec:"32807,omitempty"`
}

type Baseline struct {
	_struct                    bool                      `codec:",uint"` //encode struct with "unsigned integer" keys
	Id                         *int                      `json:"id" codec:"32836,omitempty"`
	TargetPrefix               []string                  `json:"target-prefix" codec:"6,omitempty"`
	TargetPortRange            []PortRange               `json:"target-port-range" codec:"7,omitempty"`
	TargetProtocol             []int                     `json:"target-protocol" codec:"10,omitempty"`
	TargetFQDN                 []string                  `json:"target-fqdn" codec:"11,omitempty"`
	TargetURI                  []string                  `json:"target-uri" codec:"12,omitempty"`
	TotalTrafficNormalBaseline []Traffic                 `json:"total-traffic-normal-baseline" codec:"32812,omitempty"`
	TotalConnectionCapacity    []TotalConnectionCapacity `json:"total-connection-capacity" codec:"32819,omitempty"`
}

type Traffic struct {
	_struct         bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	Unit            *int    `json:"unit" codec:"32807,omitempty"`
	Protocol        *uint8  `json:"protocol" codec:"32905,omitempty"`
	LowPercentileG  *uint64 `json:"low-percentile-g" codec:"32813,omitempty"`
	MidPercentileG  *uint64 `json:"mid-percentile-g" codec:"32814,omitempty"`
	HighPercentileG *uint64 `json:"high-percentile-g" codec:"32815,omitempty"`
	PeakG           *uint64 `json:"peak-g" codec:"32816,omitempty"`
}
type TotalConnectionCapacity struct {
	_struct                bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	Protocol               *uint8  `json:"protocol" codec:"32905,omitempty"`
	Connection             *uint64 `json:"connection" codec:"32820,omitempty"`
	ConnectionClient       *uint64 `json:"connection-client" codec:"32821,omitempty"`
	Embryonic              *uint64 `json:"embryonic" codec:"32822,omitempty"`
	EmbryonicClient        *uint64 `json:"embryonic-client" codec:"32823,omitempty"`
	ConnectionPs           *uint64 `json:"connection-ps" codec:"32824,omitempty"`
	ConnectionClientPs     *uint64 `json:"connection-client-ps" codec:"32825,omitempty"`
	RequestPs              *uint64 `json:"request-ps" codec:"32826,omitempty"`
	RequestClientPs        *uint64 `json:"request-client-ps" codec:"32827,omitempty"`
	PartialRequestPs       *uint64 `json:"partial-request-ps" codec:"32828,omitempty"`
	PartialRequestClientPs *uint64 `json:"partial-request-client-ps" codec:"32829,omitempty"`
}

/*
 * Convert TelemetrySetupConfigurationRequest to strings
 */
func (ts *TelemetrySetupRequest) String() (result string) {
	result = "\n \"ietf-dots-telemetry:telemetry-setup\":\n"
	for key, t := range ts.TelemetrySetup.Telemetry {
		result += fmt.Sprintf("   \"%s[%d]\":\n", "telemetry", key+1)
		if t.TelemetryConfigurationCurrent != nil {
			result += "      \"current-config\":\n"
			tConfig := t.TelemetryConfigurationCurrent
			if tConfig.MeasurementInterval != nil {
				result += fmt.Sprintf("         \"%s\": %d\n", "measurement-interval", *tConfig.MeasurementInterval)
			}
			if tConfig.MeasurementSample != nil {
				result += fmt.Sprintf("         \"%s\": %d\n", "measurement-sample", *tConfig.MeasurementSample)
			}
			if tConfig.LowPercentile != nil {
				low, _ := tConfig.LowPercentile.Round(2).Float64()
				result += fmt.Sprintf("         \"%s\": %f\n", "low-percentile", low)
			}
			if tConfig.MidPercentile != nil {
				mid, _ := tConfig.MidPercentile.Round(2).Float64()
				result += fmt.Sprintf("         \"%s\": %f\n", "mid-percentile", mid)
			}
			if tConfig.HighPercentile != nil {
				high, _ := tConfig.HighPercentile.Round(2).Float64()
				result += fmt.Sprintf("         \"%s\": %f\n", "high-percentile", high)
			}
			for k, v := range tConfig.UnitConfigList {
				result += fmt.Sprintf("         \"%s[%d]\":\n", "unit-config", k+1)
				if v.Unit != nil {
					result += fmt.Sprintf("            \"%s\": %d\n", "unit", *v.Unit)
				}
				if v.UnitStatus != nil {
					result += fmt.Sprintf("            \"%s\": %t\n", "unit-status", *v.UnitStatus)
				}
			}
			if tConfig.ServerOriginatedTelemetry != nil {
				result += fmt.Sprintf("         \"%s\": %t\n", "server-initiated-telemetry", *tConfig.ServerOriginatedTelemetry)
			}
			if tConfig.TelemetryNotifyInterval != nil {
				result += fmt.Sprintf("         \"%s\": %d\n", "telemetry-notify-interval", *tConfig.TelemetryNotifyInterval)
			}
		}
		for k, v := range t.TotalPipeCapacity {
			result += fmt.Sprintf("      \"%s[%d]\":\n", "total-pipe-capacity", k+1)
			if v.LinkId != nil {
				result += fmt.Sprintf("         \"%s\": %s\n", "link-id", *v.LinkId)
			}
			if v.Capacity != nil {
				result += fmt.Sprintf("         \"%s\": %d\n", "capacity", *v.Capacity)
			}
			if v.Unit != nil {
				result += fmt.Sprintf("         \"%s\": %d\n", "unit", *v.Unit)
			}
		}
		for k, v := range t.Baseline {
			result += fmt.Sprintf("      \"%s[%d]\":\n", "baseline", k+1)
			if v.Id != nil {
				result += fmt.Sprintf("         \"%s\": %d\n", "id", *v.Id)
			}
			resultTargets := ConvertTargetsRequestToStrings(v.TargetPrefix, v.TargetPortRange, v.TargetProtocol, v.TargetFQDN, v.TargetURI, nil)
			result += resultTargets
			for kNormalBaseline, vNormalBaseLine := range v.TotalTrafficNormalBaseline {
				result += fmt.Sprintf("         \"%s[%d]\":\n", "total-traffic-normal-baseline", kNormalBaseline+1)
				resultTotalTrafficNormalBaseLine := vNormalBaseLine.String()
				result += resultTotalTrafficNormalBaseLine

			}
			for kConnectionCapacity, vConnectionCapacity := range v.TotalConnectionCapacity {
				result += fmt.Sprintf("         \"%s[%d]\":\n", "total-connection-capacity", kConnectionCapacity+1)
				resultConnectionCapacity := vConnectionCapacity.String()
				result += resultConnectionCapacity
			}
		}
	}
	return
}

// Convert TagetsRequest to string
func ConvertTargetsRequestToStrings(prefixs []string, portRanges []PortRange, protocols []int, fqdns []string, uris []string,  aliases []string) (result string) {
	for k, v := range prefixs {
		result += fmt.Sprintf("         \"%s[%d]\": %s\n", "target-prefix", k+1, v)
	}
	for k, v := range portRanges {
		result += fmt.Sprintf("         \"%s[%d]\":\n", "target-port-range", k+1)
		if v.LowerPort != nil {
			result += fmt.Sprintf("            \"%s\": %d\n", "lower-port", *v.LowerPort)
		}
		if v.UpperPort != nil {
			result += fmt.Sprintf("            \"%s\": %d\n", "upper-port", *v.UpperPort)
		}
	}
	for k, v := range protocols {
		result += fmt.Sprintf("         \"%s[%d]\": %d\n", "target-protocol", k+1, v)
	}
	for k, v := range fqdns {
		result += fmt.Sprintf("         \"%s[%d]\": %s\n", "target-fqdn", k+1, v)
	}
	for k, v := range uris {
		result += fmt.Sprintf("         \"%s[%d]\": %s\n", "target-uri", k+1, v)
	}
	for k, v := range aliases {
		result += fmt.Sprintf("         \"%s[%d]\": %s\n", "alias-name", k+1, v)
	}
	return
}

// Convert Traffic to string
func (traffic Traffic) String() (result string) {
	if traffic.Unit != nil {
		result += fmt.Sprintf("                  \"%s\": %d\n", "unit", *traffic.Unit)
	}
	if traffic.Protocol != nil {
		result += fmt.Sprintf("                  \"%s\": %d\n", "protocol", *traffic.Protocol)
	}
	if traffic.LowPercentileG != nil {
		result += fmt.Sprintf("                  \"%s\": %d\n", "low-percentile-g", *traffic.LowPercentileG)
	}
	if traffic.MidPercentileG != nil {
		result += fmt.Sprintf("                  \"%s\": %d\n", "mid-percentile-g", *traffic.MidPercentileG)
	}
	if traffic.HighPercentileG != nil {
		result += fmt.Sprintf("                  \"%s\": %d\n", "high-percentile-g", *traffic.HighPercentileG)
	}
	if traffic.PeakG != nil {
		result += fmt.Sprintf("                  \"%s\": %d\n", "peak-g", *traffic.PeakG)
	}
	return
}

// Convert TotalConnectionCapacity to string
func (tcc TotalConnectionCapacity) String() (result string) {
	if tcc.Protocol != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "protocol", *tcc.Protocol)
	}
	if tcc.Connection != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "connection", *tcc.Connection)
	}
	if tcc.ConnectionClient != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "connection-client", *tcc.ConnectionClient)
	}
	if tcc.Embryonic != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "embryonic", *tcc.Embryonic)
	}
	if tcc.EmbryonicClient != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "embryonic-client", *tcc.EmbryonicClient)
	}
	if tcc.ConnectionPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "connection-ps", *tcc.ConnectionPs)
	}
	if tcc.ConnectionClientPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "connection-client-ps", *tcc.ConnectionClientPs)
	}
	if tcc.RequestPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "request-ps", *tcc.RequestPs)
	}
	if tcc.RequestClientPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "request-client-ps", *tcc.RequestClientPs)
	}
	if tcc.PartialRequestPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "partial-request-ps", *tcc.PartialRequestPs)
	}
	if tcc.PartialRequestClientPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "partial-request-client-ps", *tcc.PartialRequestClientPs)
	}
	return
}

type TelemetryPreMitigationRequest struct {
	_struct                bool                    `codec:",uint"` //encode struct with "unsigned integer" keys
	TelemetryPreMitigation *TelemetryPreMitigation `json:"ietf-dots-telemetry:telemetry" codec:"32904,omitempty"`
}

type TelemetryPreMitigation struct {
	_struct                bool                     `codec:",uint"` //encode struct with "unsigned integer" keys
	PreOrOngoingMitigation []PreOrOngoingMitigation `json:"pre-or-ongoing-mitigation" codec:"32811,omitempty"`
}

type PreOrOngoingMitigation struct {
	_struct               bool                   `codec:",uint"` //encode struct with "unsigned integer" keys
	Target                *Target                `json:"target" codec:"32866,omitempty"`
	TotalTraffic          []Traffic              `json:"total-traffic" codec:"32818,omitempty"`
	TotalAttackTraffic    []Traffic              `json:"total-attack-traffic" codec:"32817,omitempty"`
	TotalAttackConnection *TotalAttackConnection `json:"total-attack-connection" codec:"32830,omitempty"`
	AttackDetail          *AttackDetail          `json:"attack-detail" codec:"32835,omitempty"`
}

type Target struct {
	_struct         bool        `codec:",uint"` //encode struct with "unsigned integer" keys
	TargetPrefix    []string    `json:"target-prefix" codec:"6,omitempty"`
	TargetPortRange []PortRange `json:"target-port-range" codec:"7,omitempty"`
	TargetProtocol  []int       `json:"target-protocol" codec:"10,omitempty"`
	FQDN            []string    `json:"target-fqdn" codec:"11,omitempty"`
	URI             []string    `json:"target-uri" codec:"12,omitempty"`
	AliasName       []string    `json:"alias-name" codec:"13,omitempty"`
}

type TotalAttackConnection struct {
	_struct         bool                           `codec:",uint"` //encode struct with "unsigned integer" keys
	LowPercentileL  []ConnectionProtocolPercentile `json:"low-percentile-l" codec:"32831,omitempty"`
	MidPercentileL  []ConnectionProtocolPercentile `json:"mid-percentile-l" codec:"32832,omitempty"`
	HighPercentileL []ConnectionProtocolPercentile `json:"high-percentile-l" codec:"32833,omitempty"`
	PeakL           []ConnectionProtocolPercentile `json:"peak-l" codec:"32834,omitempty"`
}

type AttackDetail struct {
	_struct        bool         `codec:",uint"` //encode struct with "unsigned integer" keys
	Id             *uint32      `json:"id" codec:"32836,omitempty"`
	AttackId       *string      `json:"attack-id" codec:"32837,omitempty"`
	AttackName     *string      `json:"attack-name" codec:"32838,omitempty"`
	AttackSeverity *int         `json:"attack-severity" codec:"32839,omitempty"`
	StartTime      *uint64      `json:"start-time" codec:"32840,omitempty"`
	EndTime        *uint64      `json:"end-time" codec:"32841,omitempty"`
	SourceCount    *SourceCount `json:"source-count" codec:"32842,omitempty"`
	TopTalKer      *TopTalker   `json:"top-talker" codec:"32843,omitempty"`
}

type ConnectionProtocolPercentile struct {
	_struct          bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	Protocol         *uint8  `json:"protocol" codec:"32905,omitempty"`
	Connection       *uint64 `json:"connection" codec:"32820,omitempty"`
	Embryonic        *uint64 `json:"embryonic" codec:"32822,omitempty"`
	ConnectionPs     *uint64 `json:"connection-ps" codec:"32824,omitempty"`
	RequestPs        *uint64 `json:"request-ps" codec:"32826,omitempty"`
	PartialRequestPs *uint64 `json:"partial-request-ps" codec:"32828,omitempty"`
}

type SourceCount struct {
	_struct         bool    `codec:",uint"` //encode struct with "unsigned integer" keys
	LowPercentileG  *uint64 `json:"low-percentile-g" codec:"32813,omitempty"`
	MidPercentileG  *uint64 `json:"mid-percentile-g" codec:"32814,omitempty"`
	HighPercentileG *uint64 `json:"high-percentile-g" codec:"32815,omitempty"`
	PeakG           *uint64 `json:"peak-g" codec:"32816,omitempty"`
}

type TopTalker struct {
	_struct bool     `codec:",uint"` //encode struct with "unsigned integer" keys
	Talker  []Talker `json:"talker" codec:"32859,omitempty"`
}

type Talker struct {
	_struct               bool                   `codec:",uint"` //encode struct with "unsigned integer" keys
	SpoofedStatus         *bool                  `json:"spoofed-status" codec:"32844,omitempty"`
	SourcePrefix          *string                `json:"source-prefix" codec:"32860,omitempty"`
	SourcePortRange       []PortRange            `json:"source-port-range" codec:"32862,omitempty"`
	SourceIcmpTypeRange   []SourceICMPTypeRange  `json:"source-icmp-type-range" codec:"32863,omitempty"`
	TotalAttackTraffic    []Traffic              `json:"total-attack-traffic" codec:"32817,omitempty"`
	TotalAttackConnection *TotalAttackConnection `json:"total-attack-connection" codec:"32830,omitempty"`
}

type SourceICMPTypeRange struct {
	_struct   bool `codec:",uint"` //encode struct with "unsigned integer" keys
	LowerType *int `json:"lower-type" codec:"32864,omitempty"`
	UpperType *int `json:"upper-type" codec:"32865,omitempty"`
}

/*
 * Convert TelemetryPreMitigationRequest to strings
 */
 func (tpm *TelemetryPreMitigationRequest) String() (result string) {
	result = "\n \"ietf-dots-telemetry:telemetry\":\n"
	for key, t := range tpm.TelemetryPreMitigation.PreOrOngoingMitigation {
		result += fmt.Sprintf("   \"%s[%d]\":\n", "pre-or-ongoing-mitigation", key+1)
		result += "      \"target\":\n"
		result += ConvertTargetsRequestToStrings(t.Target.TargetPrefix, t.Target.TargetPortRange, t.Target.TargetProtocol, t.Target.FQDN, t.Target.URI, t.Target.AliasName)
		for k, v := range t.TotalTraffic {
			result += fmt.Sprintf("      \"%s[%d]\":\n", "total-traffic", k+1)
			result += v.String()
		}
		for k, v := range t.TotalAttackTraffic {
			result += fmt.Sprintf("      \"%s[%d]\":\n", "total-attack-traffic", k+1)
			result += v.String()
		}
		if t.TotalAttackConnection != nil {
			result += t.TotalAttackConnection.String()
		}
		if t.AttackDetail != nil {
			result += t.AttackDetail.String()
		}
	}
	return
}

// Convert TotalAttackConnection to String
func (tac *TotalAttackConnection) String() (result string) {
	result = "      \"total-attack-connection\":\n"
	for k, v := range tac.LowPercentileL {
		result += fmt.Sprintf("         \"%s[%d]\":\n", "low-percentile-l", k+1)
		result += v.String()
	}
	for k, v := range tac.MidPercentileL {
		result += fmt.Sprintf("         \"%s[%d]\":\n", "mid-percentile-l", k+1)
		result += v.String()
	}
	for k, v := range tac.HighPercentileL {
		result += fmt.Sprintf("         \"%s[%d]\":\n", "high-percentile-l", k+1)
		result += v.String()
	}
	for k, v := range tac.PeakL {
		result += fmt.Sprintf("         \"%s[%d]\":\n", "peak-l", k+1)
		result += v.String()
	}
	return
}

// Convert ConnectionProtocolPercentile to String
func (pl ConnectionProtocolPercentile) String() (result string) {
	if pl.Protocol != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "protocol", *pl.Protocol)
	}
	if pl.Connection != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "connection", *pl.Connection)
	}
	if pl.Embryonic != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "embryonic", *pl.Embryonic)
	}
	if pl.ConnectionPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "connection-ps", *pl.ConnectionPs)
	}
	if pl.RequestPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "request-ps", *pl.RequestPs)
	}
	if pl.PartialRequestPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "partial-request-ps", *pl.PartialRequestPs)
	}
	return
}

// Convert AttackDetail to String
func (ad AttackDetail) String() (result string) {
	result = "      \"attack-detail\":\n"
	if ad.Id != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "id", *ad.Id)
	}
	if ad.AttackId != nil {
		result += fmt.Sprintf("         \"%s\": %s\n", "attack-id", *ad.AttackId)
	}
	if ad.AttackName != nil {
		result += fmt.Sprintf("         \"%s\": %s\n", "attack-name", *ad.AttackName)
	}
	if ad.AttackSeverity != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "attack-severity", *ad.AttackSeverity)
	}
	if ad.StartTime != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "start-time", *ad.StartTime)
	}
	if ad.EndTime != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "end-time", *ad.EndTime)
	}
	if ad.SourceCount != nil {
		result += "         \"source-count\":\n"
		result += ad.SourceCount.String()
	}
	if ad.TopTalKer != nil {
		result += "         \"top-talker\":\n"
		for k, v := range ad.TopTalKer.Talker {
			result += fmt.Sprintf("            \"%s[%d]\":\n", "talker", k+1)
			result += v.String()
		}
	}
	return
}

// Convert SourceCount to String
func (sc SourceCount) String() (result string) {
	if sc.LowPercentileG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "low-percentile-g", *sc.LowPercentileG)
	}
	if sc.MidPercentileG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "mid-percentile-g", *sc.MidPercentileG)
	}
	if sc.HighPercentileG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "high-percentile-g", *sc.HighPercentileG)
	}
	if sc.PeakG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "peak-g", *sc.PeakG)
	}
	return
}

// Convert Talker to String
func (t Talker) String() (result string) {
	if t.SpoofedStatus != nil {
		result += fmt.Sprintf("               \"%s\": %t\n", "spoofed-status", *t.SpoofedStatus)
	}
	if t.SourcePrefix != nil {
		result += fmt.Sprintf("               \"%s\": %s\n", "source-prefix", *t.SourcePrefix)
	}
	for k, v := range t.SourcePortRange {
		result += fmt.Sprintf("               \"%s[%d]\":\n", "source-port-range", k+1)
		if v.LowerPort != nil {
			result += fmt.Sprintf("                  \"%s\": %d\n", "lower-port", *v.LowerPort)
		}
		if v.UpperPort != nil {
			result += fmt.Sprintf("                   \"%s\": %d\n", "upper-port", *v.UpperPort)
		}
	}
	for k, v := range t.SourceIcmpTypeRange {
		result += fmt.Sprintf("               \"%s[%d]\":\n", "source-icmp-type-range", k+1)
		if v.LowerType != nil {
			result += fmt.Sprintf("                 \"%s\": %d\n", "lower-type", *v.LowerType)
		}
		if v.UpperType != nil {
			result += fmt.Sprintf("                 \"%s\": %d\n", "upper-type", *v.UpperType)
		}
	}
	for k, v := range t.TotalAttackTraffic {
		result += fmt.Sprintf("               \"%s[%d]\":\n", "total-attack-traffic", k+1)
		result += v.String()
	}
	if t.TotalAttackConnection != nil {
		result += t.TotalAttackConnection.String()
	}
	return
}

// Convert TelemetryTraffic to String
func (traffic TelemetryTraffic) String() (result string) {
	if traffic.Unit != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:unit", *traffic.Unit)
	}
	if traffic.Protocol != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:protocol", *traffic.Protocol)
	}
	if traffic.LowPercentileG != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:low-percentile-g", *traffic.LowPercentileG)
	}
	if traffic.MidPercentileG != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:mid-percentile-g", *traffic.MidPercentileG)
	}
	if traffic.HighPercentileG != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:high-percentile-g", *traffic.HighPercentileG)
	}
	if traffic.PeakG != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:peak-g", *traffic.PeakG)
	}
	return
}

// Convert TelemetryAttackDetail to String
func (ad TelemetryAttackDetail) String() (result string) {
	result = "      \"attack-detail\":\n"
	if ad.Id != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:id", *ad.Id)
	}
	if ad.AttackId != nil {
		result += fmt.Sprintf("         \"%s\": %s\n", "ietf-dots-telemetry:attack-id", *ad.AttackId)
	}
	if ad.AttackName != nil {
		result += fmt.Sprintf("         \"%s\": %s\n", "ietf-dots-telemetry:attack-name", *ad.AttackName)
	}
	if ad.AttackSeverity != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:attack-severity", *ad.AttackSeverity)
	}
	if ad.StartTime != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:start-time", *ad.StartTime)
	}
	if ad.EndTime != nil {
		result += fmt.Sprintf("         \"%s\": %d\n", "ietf-dots-telemetry:end-time", *ad.EndTime)
	}
	if ad.SourceCount != nil {
		result += "         \"ietf-dots-telemetry:source-count\":\n"
		result += ad.SourceCount.String()
	}
	if ad.TopTalKer != nil {
		result += "         \"ietf-dots-telemetry:top-talker\":\n"
		for k, v := range ad.TopTalKer.Talker {
			result += fmt.Sprintf("            \"%s[%d]\":\n", "ietf-dots-telemetry:talker", k+1)
			result += v.String()
		}
	}
	return
}

// Convert TelemetrySourceCount to String
func (sc TelemetrySourceCount) String() (result string) {
	if sc.LowPercentileG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:low-percentile-g", *sc.LowPercentileG)
	}
	if sc.MidPercentileG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:mid-percentile-g", *sc.MidPercentileG)
	}
	if sc.HighPercentileG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:high-percentile-g", *sc.HighPercentileG)
	}
	if sc.PeakG != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:peak-g", *sc.PeakG)
	}
	return
}

// Convert TelemetryTalker to String
func (t TelemetryTalker) String() (result string) {
	if t.SpoofedStatus != nil {
		result += fmt.Sprintf("               \"%s\": %t\n", "ietf-dots-telemetry:spoofed-status", *t.SpoofedStatus)
	}
	if t.SourcePrefix != nil {
		result += fmt.Sprintf("               \"%s\": %s\n", "ietf-dots-telemetry:source-prefix", *t.SourcePrefix)
	}
	for k, v := range t.SourcePortRange {
		result += fmt.Sprintf("               \"%s[%d]\":\n", "ietf-dots-telemetry:source-port-range", k+1)
		if v.LowerPort != nil {
			result += fmt.Sprintf("                  \"%s\": %d\n", "ietf-dots-telemetry:lower-port", *v.LowerPort)
		}
		if v.UpperPort != nil {
			result += fmt.Sprintf("                   \"%s\": %d\n", "ietf-dots-telemetry:upper-port", *v.UpperPort)
		}
	}
	for k, v := range t.SourceIcmpTypeRange {
		result += fmt.Sprintf("               \"%s[%d]\":\n", "ietf-dots-telemetry:source-icmp-type-range", k+1)
		if v.LowerType != nil {
			result += fmt.Sprintf("                 \"%s\": %d\n", "ietf-dots-telemetry:lower-type", *v.LowerType)
		}
		if v.UpperType != nil {
			result += fmt.Sprintf("                 \"%s\": %d\n", "ietf-dots-telemetry:upper-type", *v.UpperType)
		}
	}
	for k, v := range t.TotalAttackTraffic {
		result += fmt.Sprintf("               \"%s[%d]\":\n", "ietf-dots-telemetry:total-attack-traffic", k+1)
		result += v.String()
	}
	if t.TotalAttackConnection != nil {
		result += t.TotalAttackConnection.String()
	}
	return
}

// Convert TelemetryTotalAttackConnection to String
func (tac *TelemetryTotalAttackConnection) String() (result string) {
	result = "      \"ietf-dots-telemetry:total-attack-connection\":\n"
	if tac.LowPercentileC != nil {
		result += "         \"ietf-dots-telemetry:low-percentile-c\":\n"
		result += tac.LowPercentileC.String()
	}
	if tac.MidPercentileC != nil {
		result += "         \"ietf-dots-telemetry:mid-percentile-c\":\n"
		result += tac.MidPercentileC.String()
	}
	if tac.HighPercentileC != nil {
		result += "         \"ietf-dots-telemetry:high-percentile-c\":\n"
		result += tac.HighPercentileC.String()
	}
	if tac.PeakC != nil {
		result += "         \"ietf-dots-telemetry:peak-c\":\n"
		result += tac.PeakC.String()
	}
	return
}

// Convert TelemetryConnectionProtocolPercentile to String
func (pl TelemetryConnectionPercentile) String() (result string) {
	if pl.Connection != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:connection", *pl.Connection)
	}
	if pl.Embryonic != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:embryonic", *pl.Embryonic)
	}
	if pl.ConnectionPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:connection-ps", *pl.ConnectionPs)
	}
	if pl.RequestPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:request-ps", *pl.RequestPs)
	}
	if pl.PartialRequestPs != nil {
		result += fmt.Sprintf("            \"%s\": %d\n", "ietf-dots-telemetry:partial-request-ps", *pl.PartialRequestPs)
	}
	return
}